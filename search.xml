<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文件上传下载</title>
      <link href="/2023/03/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
      <url>/2023/03/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a><center>文件上传下载</h1><h2 id="html页面"><a href="#html页面" class="headerlink" title="html页面"></a>html页面</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>html代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;layui-form-item&quot;&gt;</span><br><span class="line">    &lt;label class=&quot;layui-form-label&quot;&gt;&lt;i class=&quot;red&quot;&gt;*&lt;/i&gt;&amp;nbsp;图片&lt;/label&gt;</span><br><span class="line">    &lt;div class=&quot;layui-upload&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;layui-btn layui-btn-warm&quot; id=&quot;uploadPhotos&quot; style=&quot;float: left; margin-right: 10px;&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;layui-icon&quot;&gt;&lt;/i&gt;上传</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">        &lt;div class=&quot;layui-form-mid red&quot;&gt;支持JPG、PNG、JPEG图片格式&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;layui-form-item&quot; id=&quot;showImg&quot;&gt;</span><br><span class="line">        &lt;label class=&quot;layui-form-label&quot;&gt;&lt;/label&gt;</span><br><span class="line">        &lt;div class=&quot;layui-input-block&quot;&gt;</span><br><span class="line">            &lt;img id=&quot;showUrl&quot; class=&quot;layui-upload-img&quot; width=&quot;100%&quot; &gt;</span><br><span class="line">            &lt;input type=&quot;hidden&quot; id=&quot;picture&quot; name=&quot;picture&quot; &gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>js:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">layui.use([&#x27;admin&#x27;, &#x27;laytpl&#x27;, &#x27;layer&#x27;, &#x27;form&#x27;, &#x27;table&#x27;, &#x27;util&#x27;, &#x27;laydate&#x27;, &#x27;upload&#x27;], function () &#123;</span><br><span class="line">    //普通图片上传</span><br><span class="line">        upload.render(&#123;</span><br><span class="line">            elem: &#x27;#uploadPhotos&#x27;</span><br><span class="line">            , url: &#x27;op/file/upload&#x27;</span><br><span class="line">            , accept: &#x27;images&#x27;</span><br><span class="line">            , exts: &#x27;jpg|png|jpeg&#x27;</span><br><span class="line">            , before: function (obj) &#123;</span><br><span class="line">                layer.load(); //上传loading</span><br><span class="line">                obj.preview(function (index, file, result) &#123;</span><br><span class="line">                    $(&#x27;#showUrl&#x27;).attr(&#x27;src&#x27;, result);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            , done: function (res) &#123;</span><br><span class="line">                layer.closeAll(&#x27;loading&#x27;); //关闭loading</span><br><span class="line">                if (res.success) &#123; //上传成功</span><br><span class="line">                    $(&#x27;#picture&#x27;).val(res.data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            , error: function (res) &#123;</span><br><span class="line">                layer.closeAll(&#x27;loading&#x27;); //关闭loading</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例图"><a href="#例图" class="headerlink" title="例图"></a>例图</h3><p>例图:<br><img src="/2023/03/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/html%E4%B8%8A%E4%BC%A0%E5%9B%BE%E4%BE%8B.png"></p><h2 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--文件的导入导出--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.afterturn&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;easypoi-base&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.afterturn&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;easypoi-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.afterturn&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;easypoi-annotation&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.15&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.15&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-ooxml-schemas&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.15&lt;/version&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;xerces&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;xercesImpl&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.mc.web.application.controller.open;</span><br><span class="line"></span><br><span class="line">import com.aliyun.opensearch.sdk.dependencies.com.google.common.net.HttpHeaders;</span><br><span class="line">import com.mc.web.application.controller.BaseCtl;</span><br><span class="line">import com.mc.web.application.model.Result;</span><br><span class="line">import com.mc.web.application.model.ResultBuilder;</span><br><span class="line">import com.mc.web.application.model.SystemSetting;</span><br><span class="line">import com.mc.web.application.model.http.RequestLog;</span><br><span class="line">import com.mc.web.application.service.FileService;</span><br><span class="line">import com.mc.web.application.service.ParamService;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.util.StringUtils;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class OpenCtl extends BaseCtl &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger LOG = LoggerFactory.getLogger(OpenCtl.class.getName());</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ParamService paramService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private FileService fileService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//文件上传</span><br><span class="line">@PostMapping(&quot;/op/file/upload&quot;)</span><br><span class="line">@RequestLog</span><br><span class="line">@ResponseBody</span><br><span class="line">public Object upload(MultipartFile file, String dir, HttpServletRequest request) throws IOException &#123;</span><br><span class="line">    //文件上传参数</span><br><span class="line">    String filename = file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">    String path = fileService.upload(file, dir, filename, 1, request);</span><br><span class="line">    Result result = mcRequestService.returnSuccess(new ResultBuilder&lt;String&gt;(), &quot;&quot;);</span><br><span class="line">    result.setData(path);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">//文件下载</span><br><span class="line">@RequestMapping(value = &quot;/op/file/&#123;dir&#125;/&#123;filename&#125;.&#123;type&#125;&quot;)</span><br><span class="line">public void fileOpen(@PathVariable(&quot;dir&quot;) String dir, @PathVariable(&quot;filename&quot;) String filename, @PathVariable(&quot;type&quot;) String type, HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class="line">    filename = filename + &quot;.&quot; + type;</span><br><span class="line">    SystemSetting setting = SystemSetting.INSTANCE;</span><br><span class="line">    File file = new File(setting.getFileEndpoint() + dir + File.separator + filename);</span><br><span class="line">    Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">    InputStream objectContent = null;</span><br><span class="line">    String contentType = &quot;application/octet-stream&quot;;</span><br><span class="line">    String downloadType = &quot;&quot;;</span><br><span class="line">    switch (type) &#123;</span><br><span class="line">        case &quot;jpg&quot;:</span><br><span class="line">        case &quot;jpeg&quot;:</span><br><span class="line">        case &quot;gif&quot;:</span><br><span class="line">        case &quot;png&quot;:</span><br><span class="line">        case &quot;bmp&quot;:</span><br><span class="line">            downloadType = &quot;inline;&quot;;</span><br><span class="line">            contentType = &quot;image/&quot; + type;</span><br><span class="line">            break;</span><br><span class="line">        case &quot;pdf&quot;:</span><br><span class="line">            downloadType = &quot;inline;&quot;;</span><br><span class="line">            contentType = &quot;application/pdf&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case &quot;mp4&quot;:</span><br><span class="line">            downloadType = &quot;video/&quot;+type;</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            downloadType = &quot;attachment;&quot;;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        response.setContentType(contentType);</span><br><span class="line">        response.setHeader(&quot;Content-Disposition&quot;, downloadType + &quot;filename=&quot;</span><br><span class="line">                + new String(filename.getBytes(&quot;gbk&quot;), &quot;ISO8859-1&quot;) + &quot;&quot;);</span><br><span class="line">        OutputStream out = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        response.setHeader(&quot;Accept-Ranges&quot;, &quot;bytes&quot;);</span><br><span class="line">        response.setHeader(&quot;Connection&quot;, &quot;close&quot;);</span><br><span class="line">        response.setHeader(&quot;Content-Length&quot;, &quot;&quot; + file.length());</span><br><span class="line">        String range = request.getHeader(&quot;Range&quot;);</span><br><span class="line">        long rangeStart = range == null ? 0 : Long.parseLong(range</span><br><span class="line">                .substring(range.indexOf(&quot;=&quot;) + 1, range.indexOf(&quot;-&quot;)));</span><br><span class="line">        long rangeEnd = range == null ? file.length() : range.substring(</span><br><span class="line">                range.indexOf(&quot;-&quot;) + 1).equals(&quot;&quot;) ? file.length() : Long</span><br><span class="line">                .parseLong(range.substring(range.indexOf(&quot;-&quot;) + 1));</span><br><span class="line">        // if(rangeStart!=0)</span><br><span class="line">        // response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);</span><br><span class="line">        response.setHeader(&quot;Content-Range&quot;, &quot;bytes &quot; + rangeStart + &quot;-&quot;</span><br><span class="line">                + ((int) rangeEnd - 1) + &quot;/&quot; + (int) file.length());</span><br><span class="line"></span><br><span class="line">        byte[] b = new byte[1024 * 1024 * 8];</span><br><span class="line">        int off = (int) rangeStart;</span><br><span class="line">        objectContent = new FileInputStream(file);</span><br><span class="line">        objectContent.skip(rangeStart);</span><br><span class="line">        while (off &lt; rangeEnd) &#123;</span><br><span class="line">            int len = objectContent.read(b);</span><br><span class="line">            if (len == -1) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            off += len;</span><br><span class="line">            out.write(b, 0, len);</span><br><span class="line">        &#125;</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        LOG.error(&quot;打开文件失败&quot;, e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            if (objectContent != null) &#123;</span><br><span class="line">                objectContent.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            LOG.error(&quot;文件流关闭异常&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 表单上传的文件</span><br><span class="line">*</span><br><span class="line">* @param uploadFile</span><br><span class="line">* @param dir</span><br><span class="line">* @param filename</span><br><span class="line">* @param type       1.普通</span><br><span class="line">* @param request</span><br><span class="line">* @return</span><br><span class="line">*/</span><br><span class="line">public String upload(MultipartFile uploadFile, String dir, String filename, int type, HttpServletRequest request) throws IOException;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="serviceImpl"><a href="#serviceImpl" class="headerlink" title="serviceImpl"></a>serviceImpl</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">package com.mc.web.application.service.impl;</span><br><span class="line"></span><br><span class="line">import com.aliyun.oss.model.PutObjectResult;</span><br><span class="line">import com.mc.web.application.common.AliyunConsts;</span><br><span class="line">import com.mc.web.application.dao.ParamMapper;</span><br><span class="line">import com.mc.web.application.model.SystemSetting;</span><br><span class="line">import com.mc.web.application.service.FileService;</span><br><span class="line">import com.mc.web.application.util.aliyun.OSSUtil;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Calendar;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by mc on 2016/8/26.</span><br><span class="line"> */</span><br><span class="line">@Service</span><br><span class="line">@Transactional</span><br><span class="line">public class FileServiceImpl implements FileService &#123;</span><br><span class="line"></span><br><span class="line">    // 设置每块为 500K</span><br><span class="line">    private static final long PART_SIZE = 1024 * 500;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ParamMapper paramMapper;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String upload(MultipartFile uploadFile, String dir, String filename, int type, HttpServletRequest request) throws IOException &#123;</span><br><span class="line">        String url = null;</span><br><span class="line">        switch (type) &#123;</span><br><span class="line">            case 1:</span><br><span class="line">                // 上传到本地</span><br><span class="line">                SystemSetting setting = SystemSetting.INSTANCE;</span><br><span class="line">                String relpath = setting.getFileEndpoint();</span><br><span class="line">                if(dir==null || dir.isEmpty())&#123;</span><br><span class="line">                    dir = &quot;download&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">                File dirs = new File(relpath + dir);</span><br><span class="line">                // 如果目录不存在，则创建目录</span><br><span class="line">                if (!dirs.exists()) &#123;</span><br><span class="line">                    dirs.mkdirs();</span><br><span class="line">                &#125;</span><br><span class="line">                //加上时间戳</span><br><span class="line">                Calendar cal = Calendar.getInstance();</span><br><span class="line">                SimpleDateFormat dft = new SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);</span><br><span class="line">                String nowTime = dft.format(cal.getTime());</span><br><span class="line">                String uppath = dir + File.separator + nowTime + filename;</span><br><span class="line">                File newFile = new File(relpath + uppath);</span><br><span class="line">                uploadFile.transferTo(newFile);</span><br><span class="line">                url = request.getScheme() + &quot;://&quot; + request.getServerName() + &quot;:&quot; + request.getServerPort() + &quot;/op/file/&quot; + dir + &quot;/&quot; + nowTime + filename;</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        return url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="视频在线播放"><a href="#视频在线播放" class="headerlink" title="视频在线播放"></a>视频在线播放</h3><p>视频文件保存的地方,前端不能直接访问,需要通过后端接口取出在返回前端.<br>类似这种</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;video id=&quot;showVideo&quot; width=&quot;100%&quot;  controls&gt;</span><br><span class="line">    &lt;source src=&quot;http://ip:port/xxxxxxx&quot; type=&quot;video/mp4&quot;&gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure><p>视频虽然也是文件的一种类型,如果直接是用上面的文件下载案例,你就会发现视频大的话会卡顿很久.有的还会报错如:<br><code>java.io.IOException: 您的主机中的软件中止了一个已建立的连接</code><br>究其原因是因为前端页面播放视频都是从头加载视频,为了解决这一问题,后台给前端提供的接口需要实现断点下载的功能<br>前端:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;video id=&quot;showVideo&quot; width=&quot;100%&quot;  controls&gt;</span><br><span class="line">    &lt;source src=&quot;/getVideo?path=http://ip:port/xxxxxxx&quot; type=&quot;video/mp4&quot;&gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure><p>例图:<br><img src="/2023/03/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/%E8%A7%86%E9%A2%91%E4%B8%8A%E4%BC%A0%E5%9B%BE%E4%BE%8B.png"></p><p>后端:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/getVideo&quot;)</span><br><span class="line">public void play(String path, HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class="line">    //fileName = xxx.MP4;</span><br><span class="line">    String[] titles = path.split(&quot;[/]&quot;);</span><br><span class="line">    String fileName = titles[titles.length-1];</span><br><span class="line">    SystemSetting setting = SystemSetting.INSTANCE;</span><br><span class="line"></span><br><span class="line">    RandomAccessFile targetFile = null;</span><br><span class="line">    OutputStream outputStream = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        outputStream = response.getOutputStream();</span><br><span class="line">        response.reset();</span><br><span class="line">        //获取请求头中Range的值</span><br><span class="line">        String rangeString = request.getHeader(&quot;Range&quot;);</span><br><span class="line"></span><br><span class="line">        //打开文件</span><br><span class="line">        File file = new File(setting.getFileEndpoint() + &quot;download&quot; + File.separator + fileName);</span><br><span class="line">        /*File file = new File(path);*/</span><br><span class="line">        if (file.exists()) &#123;</span><br><span class="line">            //使用RandomAccessFile读取文件</span><br><span class="line">            targetFile = new RandomAccessFile(file, &quot;r&quot;);</span><br><span class="line">            long fileLength = targetFile.length();</span><br><span class="line">            long requestSize = (int)fileLength;</span><br><span class="line">            //分段下载视频</span><br><span class="line">            if (StringUtils.hasText(rangeString)) &#123;</span><br><span class="line">                //从Range中提取需要获取数据的开始和结束位置</span><br><span class="line">                long requestStart = 0, requestEnd = 0;</span><br><span class="line">                String[] ranges = rangeString.split(&quot;=&quot;);</span><br><span class="line">                if (ranges.length &gt; 1) &#123;</span><br><span class="line">                    String[] rangeDatas = ranges[1].split(&quot;-&quot;);</span><br><span class="line">                    requestStart = Integer.parseInt(rangeDatas[0]);</span><br><span class="line">                    if (rangeDatas.length &gt; 1) &#123;</span><br><span class="line">                        requestEnd = Integer.parseInt(rangeDatas[1]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (requestEnd != 0 &amp;&amp; requestEnd &gt; requestStart) &#123;</span><br><span class="line">                    requestSize = requestEnd - requestStart + 1;</span><br><span class="line">                &#125;</span><br><span class="line">                //根据协议设置请求头</span><br><span class="line">                response.setHeader(HttpHeaders.ACCEPT_RANGES, &quot;bytes&quot;);</span><br><span class="line">                response.setHeader(HttpHeaders.CONTENT_TYPE, &quot;video/mp4&quot;);</span><br><span class="line">                if (!StringUtils.hasText(rangeString)) &#123;</span><br><span class="line">                    response.setHeader(HttpHeaders.CONTENT_LENGTH, fileLength + &quot;&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    long length;</span><br><span class="line">                    if (requestEnd &gt; 0) &#123;</span><br><span class="line">                        length = requestEnd - requestStart + 1;</span><br><span class="line">                        response.setHeader(HttpHeaders.CONTENT_LENGTH, &quot;&quot; + length);</span><br><span class="line">                        response.setHeader(HttpHeaders.CONTENT_RANGE,</span><br><span class="line">                                &quot;bytes &quot; + requestStart + &quot;-&quot; + requestEnd + &quot;/&quot; + fileLength);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        length = fileLength - requestStart;</span><br><span class="line">                        response.setHeader(HttpHeaders.CONTENT_LENGTH, &quot;&quot; + length);</span><br><span class="line">                        response.setHeader(HttpHeaders.CONTENT_RANGE,</span><br><span class="line">                                &quot;bytes &quot; + requestStart + &quot;-&quot; + (fileLength - 1) + &quot;/&quot; + fileLength);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                //文段下载视频返回206</span><br><span class="line">                response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);</span><br><span class="line">                //设置targetFile，从自定义位置开始读取数据</span><br><span class="line">                targetFile.seek(requestStart);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //如果Range为空则下载整个视频</span><br><span class="line">                response.setHeader(HttpHeaders.CONTENT_DISPOSITION, &quot;attachment; filename=&quot; + fileName + &quot;&quot;);</span><br><span class="line">                //设置文件长度</span><br><span class="line">                response.setHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(fileLength));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //从磁盘读取数据流返回</span><br><span class="line">            byte[] cache = new byte[1024*1024*8];</span><br><span class="line">            try &#123;</span><br><span class="line">                while (requestSize &gt; 0) &#123;</span><br><span class="line">                    int len = targetFile.read(cache);</span><br><span class="line">                    if (requestSize &lt; cache.length) &#123;</span><br><span class="line">                        outputStream.write(cache, 0, (int)requestSize);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        outputStream.write(cache, 0, len);</span><br><span class="line">                        if (len &lt; cache.length) &#123;</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    requestSize -= cache.length;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new RuntimeException(&quot;文件路径有误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        outputStream.flush();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (outputStream != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (targetFile != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                targetFile.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 随笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成员方法</title>
      <link href="/2022/11/28/%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95/"/>
      <url>/2022/11/28/%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="成员方法"><a href="#成员方法" class="headerlink" title=" 成员方法"></a><center> 成员方法</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><blockquote><p>在某些情况下我们需要定义成员方法(简称方法)</p></blockquote><p>方法(Method)的本意是功能块，就是实现某个功能的语句块的结合。</p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个类</span><br><span class="line">class Human&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private int blood = 100;</span><br><span class="line">    //增加一个walk方法</span><br><span class="line">    //public: 表示方法是公开的</span><br><span class="line">    //void: 表示方法没有返回值</span><br><span class="line">    //walk(): walk表示方法名,()形参列表</span><br><span class="line">    //&#123;&#125;: 方法体可以写需要执行的代码</span><br><span class="line">    public void walk()&#123;</span><br><span class="line">        System.out.println(&quot;走路&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void poisoning()&#123;</span><br><span class="line">        for(int i=0;i&lt;5;i++)&#123;</span><br><span class="line">            blood -=1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void poisoning1(int damage)&#123;</span><br><span class="line">        for(int i=0;i&lt;5;i++)&#123;</span><br><span class="line">            blood -=damage;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getSum(int num1,int num2)&#123;</span><br><span class="line">        int sum = num1+num2;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] age)&#123;</span><br><span class="line">    //调用walk()方法</span><br><span class="line">    //先创建对象,再调用方法</span><br><span class="line">    OOP oop1 = new OOP();</span><br><span class="line">    OOP.Human human = oop1.new Human();</span><br><span class="line">    //human.walk();</span><br><span class="line">    //human.poisoning();</span><br><span class="line">    human.poisoning1(1);</span><br><span class="line">    human.getSum(1,2);</span><br><span class="line">    System.out.println(human.blood);</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意:</p><ol><li>方法写好后,如果不去调用,就不会输出</li></ol><h2 id="方法的调用机制原理"><a href="#方法的调用机制原理" class="headerlink" title="*方法的调用机制原理"></a>*方法的调用机制原理</h2><h2 id="为什么需要成员方法"><a href="#为什么需要成员方法" class="headerlink" title="为什么需要成员方法"></a>为什么需要成员方法</h2><h3 id="成员方法的好处"><a href="#成员方法的好处" class="headerlink" title="成员方法的好处"></a>成员方法的好处</h3><h3 id="成员方法的定义"><a href="#成员方法的定义" class="headerlink" title="成员方法的定义"></a>成员方法的定义</h3><h2 id="注意事项与细节"><a href="#注意事项与细节" class="headerlink" title="注意事项与细节"></a>注意事项与细节</h2><h2 id="类定义的完善"><a href="#类定义的完善" class="headerlink" title="类定义的完善"></a>类定义的完善</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 面向对象 </category>
          
          <category> 面向对象基础 </category>
          
          <category> 方法 </category>
          
          <category> 成员方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类与对象</title>
      <link href="/2022/11/04/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/11/04/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a><center>类与对象</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>万物皆对象</p></blockquote><p>一个程序就是一个世界,在其中有很多的事务(对象[属性,行为])</p><h3 id="类与对象的关系示意图"><a href="#类与对象的关系示意图" class="headerlink" title="类与对象的关系示意图"></a>类与对象的关系示意图</h3><p><img src="/2022/11/04/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%B3%E7%B3%BB%E7%A4%BA%E6%84%8F%E5%9B%BE.png"><br>*说明:从猫类到对象目前有以下几种说法:1.创建一个对象2.实例化一个对象3.把类实例化…</p><ol><li>类:自定义的数据类型</li><li>可以通过类创建一个对象</li><li>对象就是一个具体的实例</li></ol><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个类</span><br><span class="line">class Human&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private String race;</span><br><span class="line">&#125;</span><br><span class="line">//面向对象</span><br><span class="line">public class ObjectOrientedProgramming &#123;</span><br><span class="line">    public static void main(String[] arg)&#123;</span><br><span class="line">        //new一个对象</span><br><span class="line">        //把创建的Human对象赋给blackMan</span><br><span class="line">        Human blackMan = new Human();</span><br><span class="line">        blackMan.name = &quot;jason&quot;;</span><br><span class="line">        blackMan.age = &quot;23&quot;;</span><br><span class="line">        blackMan.race = &quot;尼格罗人种&quot;;</span><br><span class="line">        //把创建的Human对象赋给blackMan2</span><br><span class="line">        Human blackMan2 = new Human();</span><br><span class="line">        blackMan.name = &quot;miki&quot;;</span><br><span class="line">        blackMan.age = &quot;56&quot;;</span><br><span class="line">        blackMan.race = &quot;尼格罗人种&quot;;</span><br><span class="line">        //使用访问对象的属性</span><br><span class="line">        System.out.println(&quot;human1:&quot;+blackMan.name+&quot; &quot;+blackMan.age+&quot; &quot;+blackMan.race);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从以上示例可以看出:</p><ol><li>类是抽象的,概念的,代表一类事物的,就叫类….即是数据类型</li><li>对象是具体的,实际的,代表一个具体的事物的,就叫对象,万物皆对象….即是实例</li><li>类是对象的模板,对象是类中的一个个体,对应一个实例</li></ol><h2 id="对象在内存中存在的形式"><a href="#对象在内存中存在的形式" class="headerlink" title="对象在内存中存在的形式"></a>对象在内存中存在的形式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Human human = new Human();</span><br><span class="line">human.name = &quot;小李&quot;;</span><br><span class="line">human.age = 23;</span><br><span class="line">human.race = &quot;黄色人种&quot;;</span><br></pre></td></tr></table></figure><p><img src="/2022/11/04/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E5%AD%98%E5%9C%A8%E7%9A%84%E5%BD%A2%E5%BC%8F.png"><br>说明:</p><ol><li>类的属性和静态方法是同类同时加载的</li><li>属性和行为会加载到方法区</li><li>在创建对象时,会先加载对象的类信息</li></ol><h2 id="属性-x2F-成员变量-x2F-字段"><a href="#属性-x2F-成员变量-x2F-字段" class="headerlink" title="属性&#x2F;成员变量&#x2F;字段"></a>属性&#x2F;成员变量&#x2F;字段</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍:"></a>基本介绍:</h3><ol><li>从概念或者叫法上看:成员变量&#x3D;属性&#x3D;field(字段)<br>例如:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个类</span><br><span class="line">class Human&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private String race;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>其中name,age,race就是属性&#x2F;成员变量&#x2F;字段</li><li>属性是类的一个组成部分,一般是基本数据类型,也可以是引用类型(对象,数组,String)</li></ol><h3 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><h4 id="1-属性的定义语法和变量的定义语法相同"><a href="#1-属性的定义语法和变量的定义语法相同" class="headerlink" title="1. 属性的定义语法和变量的定义语法相同"></a>1. 属性的定义语法和变量的定义语法相同</h4><p>示例:访问修饰符 属性类型 属性名<br>简单介绍访问修饰符:</p><ol><li>有四种访问修饰符: public,proctected,默认,private</li></ol><h4 id="2-属性的定义类型可以为任意类型-包含基本类型或引用类型"><a href="#2-属性的定义类型可以为任意类型-包含基本类型或引用类型" class="headerlink" title="2. 属性的定义类型可以为任意类型,包含基本类型或引用类型"></a>2. 属性的定义类型可以为任意类型,包含基本类型或引用类型</h4><h4 id="3-属性如果不赋值-有默认值-规则和数组一致"><a href="#3-属性如果不赋值-有默认值-规则和数组一致" class="headerlink" title="3. 属性如果不赋值,有默认值,规则和数组一致"></a>3. 属性如果不赋值,有默认值,规则和数组一致</h4><p>如果没有赋值,有默认值int 0,short 0, byte 0, long 0, float 0.0,double 0.0,char \u0000,boolean false,String null<br><a href="https://tomatoooooooo.gitee.io/2022/09/20/%E6%95%B0%E7%BB%84/">数组篇</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    String name;</span><br><span class="line">    int age;</span><br><span class="line">    boolean isMan;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class PersonDetail&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        //创建Person对象</span><br><span class="line">        //lex 是对象名(对象引用)</span><br><span class="line">        //new Person() 这个创建的对象空间 才是真正的对象</span><br><span class="line">        Person lex = new Person();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="如何创建对象"><a href="#如何创建对象" class="headerlink" title="如何创建对象"></a>如何创建对象</h3><p>1.先声明在创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person person;</span><br><span class="line">person = new Person();</span><br></pre></td></tr></table></figure><p>2.直接创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person person = new Person();</span><br></pre></td></tr></table></figure><h3 id="如何访问属性"><a href="#如何访问属性" class="headerlink" title="如何访问属性"></a>如何访问属性</h3><p>基本语法:<br>对象名.属性名<br>例如<br><code>person.name</code></p><h2 id="类和对象的内存分配机制"><a href="#类和对象的内存分配机制" class="headerlink" title="类和对象的内存分配机制"></a>类和对象的内存分配机制</h2><p>例题:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = new Person();</span><br><span class="line">p1.age = 10;</span><br><span class="line">p1.name = &quot;小明&quot;;</span><br><span class="line">Person p2 = p1; //把p1赋给了p2，让p2指向p1</span><br><span class="line">System.out.printIn(p2.age);</span><br><span class="line">请问:p2.age究竟是多少?并画出内存图</span><br></pre></td></tr></table></figure><p><img src="/2022/11/04/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/%E7%A4%BA%E4%BE%8B1.png"></p><h3 id="类和对象的内存分配机制-1"><a href="#类和对象的内存分配机制-1" class="headerlink" title="类和对象的内存分配机制"></a>类和对象的内存分配机制</h3><p>Java内存的结构分析:</p><ol><li>栈:一般存放基本数据类型(局部变量)</li><li>堆:存放对象(Cat cat,数组等等)</li><li>方法区:常量池(常量如字符串),类加载信息</li></ol><h3 id="Java创建对象的流程简单分析"><a href="#Java创建对象的流程简单分析" class="headerlink" title="Java创建对象的流程简单分析"></a>Java创建对象的流程简单分析</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Person p = new Person();</span><br><span class="line">p.age = 10;</span><br><span class="line">p.name = &quot;小明&quot;;</span><br><span class="line">```   </span><br><span class="line">1. 先加载Person类信息(只会加载一次)</span><br><span class="line">2. 在堆中分配空间,进行默认初始化</span><br><span class="line">3. 把地址返回给p,p就指向对象</span><br><span class="line">4. 进行指定初始化 例如:p.age=10</span><br><span class="line">## 对象机制练习</span><br></pre></td></tr></table></figure><p>Person a&#x3D;new Person();<br>a.age&#x3D;10;<br>a.name&#x3D;”小明”;<br>Person b;<br>b&#x3D;a;<br>System.out.println(b.name);<br>b.age&#x3D;200;<br>b&#x3D;null;<br>System.out.println(a.age);<br>System.out.println(b.age);</p><p>&#x2F;&#x2F;——————–<br>小明<br>200<br>b.age 会导致程序出现异常<br>&#x2F;&#x2F;——————–<br>&#96;&#96;&#96;</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 面向对象 </category>
          
          <category> 面向对象基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调用高德地图api实现查询轨迹功能</title>
      <link href="/2022/11/03/%E8%B0%83%E7%94%A8%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEapi%E5%AE%9E%E7%8E%B0%E6%9F%A5%E8%AF%A2%E8%BD%A8%E8%BF%B9%E5%8A%9F%E8%83%BD/"/>
      <url>/2022/11/03/%E8%B0%83%E7%94%A8%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEapi%E5%AE%9E%E7%8E%B0%E6%9F%A5%E8%AF%A2%E8%BD%A8%E8%BF%B9%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="调用高德地图api实现查询轨迹功能"><a href="#调用高德地图api实现查询轨迹功能" class="headerlink" title="调用高德地图api实现查询轨迹功能"></a><center>调用高德地图api实现查询轨迹功能</h1><h2 id="高德地图JS-API"><a href="#高德地图JS-API" class="headerlink" title="高德地图JS API"></a>高德地图JS API</h2><ol><li><p>注册账号并申请key.<a href="https://console.amap.com/dev/key/app">申请地址</a></p></li><li><p>添加key的时候服务平台一项选择Web端(JSAPI)<br><img src="/2022/11/03/%E8%B0%83%E7%94%A8%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEapi%E5%AE%9E%E7%8E%B0%E6%9F%A5%E8%AF%A2%E8%BD%A8%E8%BF%B9%E5%8A%9F%E8%83%BD/%E7%94%B3%E8%AF%B7key.png"></p></li><li><p>添加成功后，可获取到key值和安全密钥jscode    *注:自2021年12月02日升级，升级之后所申请的 key 必须配备安全密钥 jscode 一起使用</p></li></ol><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><ol><li>参考官方参考手册中的轨迹展示.<a href="https://lbs.amap.com/api/amap-ui/reference-amap-ui/mass-data/pathsimplifier">轨迹展示</a></li><li>参考官方JSAPI UI组件示例中的简单路径Demo.<a href="https://lbs.amap.com/demo/amap-ui/demos/amap-ui-pathsimplifier/simple-demo">Demo</a></li><li>官方示例代码:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;!-- 原始地址：//webapi.amap.com/ui/1.1/ui/misc/PathSimplifier/examples/simple-demo.html --&gt;</span><br><span class="line">    &lt;base href=&quot;//webapi.amap.com/ui/1.1/ui/misc/PathSimplifier/examples/&quot; /&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0, user-scalable=no, width=device-width&quot;&gt;</span><br><span class="line">    &lt;title&gt;简单路径&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    html,</span><br><span class="line">    body,</span><br><span class="line">    #container &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        margin: 0px;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&#x27;//webapi.amap.com/maps?v=2.0&amp;key=您申请的key值&#x27;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- UI组件库 1.0 --&gt;</span><br><span class="line">    &lt;script src=&quot;//webapi.amap.com/ui/1.1/main.js?v=1.1.1&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    //创建地图</span><br><span class="line">    var map = new AMap.Map(&#x27;container&#x27;, &#123;</span><br><span class="line">        zoom: 4</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    AMapUI.load([&#x27;ui/misc/PathSimplifier&#x27;, &#x27;lib/$&#x27;], function(PathSimplifier, $) &#123;</span><br><span class="line"></span><br><span class="line">        if (!PathSimplifier.supportCanvas) &#123;</span><br><span class="line">            alert(&#x27;当前环境不支持 Canvas！&#x27;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var pathSimplifierIns = new PathSimplifier(&#123;</span><br><span class="line">            zIndex: 100,</span><br><span class="line">            //autoSetFitView:false,</span><br><span class="line">            map: map, //所属的地图实例</span><br><span class="line"></span><br><span class="line">            getPath: function(pathData, pathIndex) &#123;</span><br><span class="line"></span><br><span class="line">                return pathData.path;</span><br><span class="line">            &#125;,</span><br><span class="line">            getHoverTitle: function(pathData, pathIndex, pointIndex) &#123;</span><br><span class="line"></span><br><span class="line">                if (pointIndex &gt;= 0) &#123;</span><br><span class="line">                    //point </span><br><span class="line">                    return pathData.name + &#x27;，点：&#x27; + pointIndex + &#x27;/&#x27; + pathData.path.length;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                return pathData.name + &#x27;，点数量&#x27; + pathData.path.length;</span><br><span class="line">            &#125;,</span><br><span class="line">            renderOptions: &#123;</span><br><span class="line"></span><br><span class="line">                renderAllPointsIfNumberBelow: 100 //绘制路线节点，如不需要可设置为-1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        window.pathSimplifierIns = pathSimplifierIns;</span><br><span class="line"></span><br><span class="line">        //设置数据</span><br><span class="line">        pathSimplifierIns.setData([&#123;</span><br><span class="line">            name: &#x27;路线0&#x27;,</span><br><span class="line">            path: [</span><br><span class="line">                [116.405289, 39.904987],</span><br><span class="line">                [113.964458, 40.54664],</span><br><span class="line">                [111.47836, 41.135964],</span><br><span class="line">                [108.949297, 41.670904],</span><br><span class="line">                [106.380111, 42.149509],</span><br><span class="line">                [103.774185, 42.56996],</span><br><span class="line">                [101.135432, 42.930601],</span><br><span class="line">                [98.46826, 43.229964],</span><br><span class="line">                [95.777529, 43.466798],</span><br><span class="line">                [93.068486, 43.64009],</span><br><span class="line">                [90.34669, 43.749086],</span><br><span class="line">                [87.61792, 43.793308]</span><br><span class="line">            ]</span><br><span class="line">        &#125;]);</span><br><span class="line"></span><br><span class="line">        //对第一条线路（即索引 0）创建一个巡航器</span><br><span class="line">        var navg1 = pathSimplifierIns.createPathNavigator(0, &#123;</span><br><span class="line">            loop: true, //循环播放</span><br><span class="line">            speed: 1000000 //巡航速度，单位千米/小时</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        navg1.start();</span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li>通过观察官方示例我们可以看到构建轨迹使用的是<code>pathSimplifierIns.setData</code>方法,通过ajax请求调用之后返回一个正确的json给它就行</li></ol><p>总结:后台获取数据格式化成规定JSON数据之后返回给前台pathSimplifierIns.setData方法</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li>前端代码html<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;工作轨迹&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        window._AMapSecurityConfig = &#123;</span><br><span class="line">            securityJsCode: &#x27;你的安全密钥值&#x27;,</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        html,</span><br><span class="line">        body,</span><br><span class="line">        #container &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">            margin: 0px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;button onclick=&quot;init()&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;http://code.jquery.com/jquery-2.1.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;div id=&#x27;container&#x27;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- api js --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://webapi.amap.com/maps?v=2.0&amp;key=你申请的key值&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- ui --&gt;</span><br><span class="line">&lt;script src=&quot;https://webapi.amap.com/ui/1.1/main.js?v=1.1.1&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 业务处理 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var map = new AMap.Map(&#x27;container&#x27;, &#123;</span><br><span class="line">        zoom: 4</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    AMapUI.load([&#x27;ui/misc/PathSimplifier&#x27;, &#x27;lib/$&#x27;], function(PathSimplifier, $) &#123;</span><br><span class="line"></span><br><span class="line">        if (!PathSimplifier.supportCanvas) &#123;</span><br><span class="line">            alert(&#x27;当前环境不支持 Canvas！&#x27;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var pathSimplifierIns = new PathSimplifier(&#123;</span><br><span class="line">            zIndex: 100,</span><br><span class="line">            //autoSetFitView:false,</span><br><span class="line">            map: map, //所属的地图实例</span><br><span class="line"></span><br><span class="line">            getPath: function(pathData, pathIndex) &#123;</span><br><span class="line"></span><br><span class="line">                var points = pathData.points,</span><br><span class="line">                    lnglatList = [];</span><br><span class="line"></span><br><span class="line">                for (var i = 0, len = points.length; i &lt; len; i++) &#123;</span><br><span class="line">                    lnglatList.push(points[i].lnglat);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                return lnglatList;</span><br><span class="line">            &#125;,</span><br><span class="line">            getHoverTitle: function(pathData, pathIndex, pointIndex) &#123;</span><br><span class="line"></span><br><span class="line">                if (pointIndex &gt;= 0) &#123;</span><br><span class="line">                    //point</span><br><span class="line">                    return pathData.name + &#x27;，&#x27; + pathData.points[pointIndex].name;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                return pathData.name + &#x27;，点数量&#x27; + pathData.points.length;</span><br><span class="line">            &#125;,</span><br><span class="line">            renderOptions: &#123;</span><br><span class="line"></span><br><span class="line">                renderAllPointsIfNumberBelow: 100 //绘制路线节点，如不需要可设置为-1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        window.pathSimplifierIns = pathSimplifierIns;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function init() &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: &quot;/index/upload&quot;,</span><br><span class="line">            type: &quot;POST&quot;,</span><br><span class="line">            dataType: &quot;json&quot;,</span><br><span class="line">            success: function (ref) &#123;</span><br><span class="line">                console.log(ref);</span><br><span class="line">                if(ref.code === 0)&#123;</span><br><span class="line">                    pathSimplifierIns.setData(ref.data);</span><br><span class="line"></span><br><span class="line">                    //选中路线0</span><br><span class="line">                    pathSimplifierIns.setSelectedPathIndex(0);</span><br><span class="line">                    pathSimplifierIns.on(&#x27;pointClick&#x27;, function(e, info) &#123;</span><br><span class="line">                        console.log(&#x27;Click: &#x27; + info.pathData.points[info.pointIndex].name);</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                    //对第一条线路（即索引 0）创建一个巡航器</span><br><span class="line">                    /*var navg1 = pathSimplifierIns.createPathNavigator(0, &#123;</span><br><span class="line">                        loop: true, //循环播放</span><br><span class="line">                        speed: 5000 //巡航速度，单位千米/小时</span><br><span class="line">                    &#125;);*/</span><br><span class="line"></span><br><span class="line">                    navg1.start();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>仿照下列Josn格式设置轨迹路径相应的实体类,VO和响应体<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: &#x27;路线0&#x27;,</span><br><span class="line">    path: [</span><br><span class="line">        [116.405289, 39.904987],</span><br><span class="line">        [113.964458, 40.54664],</span><br><span class="line">        [111.47836, 41.135964],</span><br><span class="line">        [108.949297, 41.670904],</span><br><span class="line">        [106.380111, 42.149509],</span><br><span class="line">        [103.774185, 42.56996],</span><br><span class="line">        [101.135432, 42.930601],</span><br><span class="line">        [98.46826, 43.229964],</span><br><span class="line">        [95.777529, 43.466798],</span><br><span class="line">        [93.068486, 43.64009],</span><br><span class="line">        [90.34669, 43.749086],</span><br><span class="line">        [87.61792, 43.793308]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>实体类:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 轨迹数据</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">public class Coordinate &#123;</span><br><span class="line">    private int cid;</span><br><span class="line">    //经度</span><br><span class="line">    private double longitude;</span><br><span class="line">    //纬度</span><br><span class="line">    private double latitude;</span><br><span class="line">    //定位地址名称</span><br><span class="line">    private String name;</span><br><span class="line">    //定位时间</span><br><span class="line">    @JsonFormat(timezone = &quot;GMT+8&quot;,pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">    private Date time;</span><br><span class="line"></span><br><span class="line">    private User user;</span><br><span class="line">    //用户id</span><br><span class="line">    private Integer uid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>VO:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 设置轨迹路径的相应 VO</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">public class WorkLocusVO &#123;</span><br><span class="line"></span><br><span class="line">    //用户</span><br><span class="line">    private Integer uid;</span><br><span class="line"></span><br><span class="line">    // 轨迹线名称</span><br><span class="line">    private String name;</span><br><span class="line">    // 轨迹线数组</span><br><span class="line">    private List&lt;Point&gt; points;</span><br><span class="line"></span><br><span class="line">    public WorkLocusVO() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public WorkLocusVO(String name, List&lt;Point&gt; points) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.points = points;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 点信息</span><br><span class="line">     */</span><br><span class="line">    @Data</span><br><span class="line">    @AllArgsConstructor</span><br><span class="line">    @NoArgsConstructor</span><br><span class="line">    public static class Point &#123;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 点名称</span><br><span class="line">         */</span><br><span class="line">        private String name;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 点经纬度</span><br><span class="line">         */</span><br><span class="line">        private List&lt;Double&gt; lnglat;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>响应体:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package com.yqy.model.base;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * json 返回结果</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">public class Result&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 错误码</span><br><span class="line">     */</span><br><span class="line">    private int code = 0;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 结果</span><br><span class="line">     */</span><br><span class="line">    private T data;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 错误描述</span><br><span class="line">     */</span><br><span class="line">    private String msg;</span><br><span class="line"></span><br><span class="line">    public Result() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Result(T data) &#123;</span><br><span class="line">        this.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Result(int code, String msg) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Result(int code, T data, String msg) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.data = data;</span><br><span class="line">        this.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Result succeed()&#123;</span><br><span class="line">        return new Result();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;E&gt; Result&lt;E&gt; succeed(E data)&#123;</span><br><span class="line">        return new Result&lt;E&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Result fail(int code,String msg)&#123;</span><br><span class="line">        return new Result&lt;&gt;(code,msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>serviceImpl<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">@Transactional</span><br><span class="line">public class CoordinateServiceImpl implements CoordinateService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private CoordinateMapper coordinateMapper;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Coordinate&gt; findAllCoordinate() &#123;</span><br><span class="line"></span><br><span class="line">        return coordinateMapper.findAllCoordinate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取轨迹数据试图</span><br><span class="line">     * @param coordinateList</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public WorkLocusVO getWorkLocusVo(List&lt;Coordinate&gt; coordinateList) &#123;</span><br><span class="line">        WorkLocusVO vo = new WorkLocusVO();</span><br><span class="line">        // 定义一个集合存储基本数据集合</span><br><span class="line">        List&lt;WorkLocusVO.Point&gt; lists = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        // 遍历查询出来的集合</span><br><span class="line">        for (Coordinate coordinate : coordinateList) &#123;</span><br><span class="line">            // 存放入集合中</span><br><span class="line">            lists.add(new WorkLocusVO.Point(coordinate.getName()</span><br><span class="line">                    , Arrays.asList(coordinate.getLongitude(),coordinate.getLatitude())));</span><br><span class="line">        &#125;</span><br><span class="line">        // 设置路线名称</span><br><span class="line">        vo.setName(&quot;我的历史轨迹路线&quot;);</span><br><span class="line">        // 设置路线数据集合</span><br><span class="line">        vo.setPoints(lists);</span><br><span class="line">        return vo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>controller<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/index&quot;)</span><br><span class="line">public class LocusController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private CoordinateService coordinateService;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;upload&quot;)</span><br><span class="line">    public Result&lt;List&lt;WorkLocusVO&gt;&gt; coordinate()&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Coordinate&gt; coordinateList = coordinateService.findAllCoordinate();</span><br><span class="line">        List&lt;WorkLocusVO&gt; workLocusVOS = Collections.singletonList(coordinateService.getWorkLocusVo(coordinateList));</span><br><span class="line">        return Result.succeed(workLocusVOS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> MyDemo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高德地图api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多维数组-二维数组</title>
      <link href="/2022/09/23/%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
      <url>/2022/09/23/%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="多维数组-二维数组"><a href="#多维数组-二维数组" class="headerlink" title="多维数组-二维数组"></a><center>多维数组-二维数组</h1><h2 id="二维数组快速入门"><a href="#二维数组快速入门" class="headerlink" title="二维数组快速入门"></a>二维数组快速入门</h2><p>什么是二维数组:</p><ol><li>从定义上看 int[][]</li><li>一维数组的每个元素是一维数组就构成二维数组</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int[][] arr = &#123;&#123;0,0,0,0,0&#125;,&#123;0,0,1,0,0&#125;,&#123;0,1,0,1,0&#125;,</span><br><span class="line">              &#123;0,0,1,0,0&#125;,&#123;0,0,0,0,0&#125;&#125;</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    //遍历二维数组的每个元素(数组)</span><br><span class="line">    //1.arr[i] 表示二维数组的第i+1个元素比如arr[0]</span><br><span class="line">    //2.arr[i].length 得到对应的每个一维数组的长度</span><br><span class="line">    for (int j = 0; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">        //遍历一维数组</span><br><span class="line">        System.out.print(arr[i][j]+&quot;\t&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维数组的使用方式"><a href="#二维数组的使用方式" class="headerlink" title="二维数组的使用方式"></a>二维数组的使用方式</h2><h3 id="使用方式1-动态初始化"><a href="#使用方式1-动态初始化" class="headerlink" title="使用方式1:动态初始化"></a>使用方式1:动态初始化</h3><ol><li>语法:类型 数组名[][] &#x3D; new 类型[大小][大小]<br><code>int a[][] = new int[2][3]</code></li></ol><p>举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int a[][] = new int[2][3];</span><br><span class="line">arr[1][1] = 8;</span><br><span class="line"></span><br><span class="line">for(int i = 0;i&lt;arr.length;i++)&#123;</span><br><span class="line">    for(int j = 0;j&lt;arr[i].length;j++)&#123;</span><br><span class="line">        System.out.print(arr[i][j]+&quot; &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组内存布局"><a href="#二维数组内存布局" class="headerlink" title="二维数组内存布局"></a>二维数组内存布局</h3><p><img src="/2022/09/23/%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.png"></p><h3 id="使用方式2-动态初始化"><a href="#使用方式2-动态初始化" class="headerlink" title="使用方式2:动态初始化"></a>使用方式2:动态初始化</h3><ol><li>先声明:类型 数组名[][];</li><li>在定义(开辟空间): 数组名 &#x3D; new 类型[大小][大小];</li><li>赋值(有默认值,例如int类型的默认值为0)</li></ol><p>案例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int arr[][];</span><br><span class="line">arr = new int[2][3];</span><br><span class="line">arr[0][2] = 8;</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    for (int j = 0; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">        System.out.print(arr[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用方式3-列数不确定"><a href="#使用方式3-列数不确定" class="headerlink" title="使用方式3:列数不确定"></a>使用方式3:列数不确定</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">需求:</span><br><span class="line">1. 动态创建下列二维数组并输出</span><br><span class="line">i = 1</span><br><span class="line">i = 2   2</span><br><span class="line">i = 3   3   3</span><br><span class="line">有三个一维数组,每个一维数组的元素是不一样的</span><br></pre></td></tr></table></figure><p>解:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int[][] arr = new int[3][]</span><br><span class="line">//遍历arr每一个一维数组</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    //给每一个一维数组开辟空间 new</span><br><span class="line">    arr[i] = new int[i+1];</span><br><span class="line">    for (int j = 0; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">        arr[i][j] = i+1;</span><br><span class="line">        System.out.print(arr[i][j]+&quot;\t&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用方式4-静态初始化"><a href="#使用方式4-静态初始化" class="headerlink" title="使用方式4:静态初始化"></a>使用方式4:静态初始化</h3><ol><li>定义:类型 数组名[][] &#x3D;  {{值1,值2...},{值1,值2...},{值1,值2...}}; </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int[][] arr = &#123;&#123;1,1,1&#125;,&#123;2,2,2&#125;,&#123;1000&#125;&#125;;</span><br><span class="line"></span><br><span class="line">解读:</span><br><span class="line">1. 定义了一个二维数组 arr</span><br><span class="line">2. arr有三个元素,每个元素都是一个一维数组</span><br><span class="line">3. 第一个一维数组有三个元素,第二个一维数组有三个元素,第三个一维数组有一个元素</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h3><p>使用二维数组打印一个10行杨辉三角</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1   1</span><br><span class="line">1   2   1</span><br><span class="line">1   3   3   1</span><br><span class="line">1   4   6   4   1</span><br><span class="line">1   5   10  10  5   1</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>提示:</p><ol><li>第一行有一个元素,第n行有n个元素</li><li>每一行的第一个元素和最后一个元素都是1</li><li>从第三行开始,对于不是第一个元素和最后一个元素的值,他的数是前一行同位的数和前一行同位前的那个数的和   例如:3 &#x3D; 2+1</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int[][] arr = new int[10][];</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    //初始化</span><br><span class="line">    arr[i] = new int[i+1];</span><br><span class="line">    for (int j = 0; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">        //设置值</span><br><span class="line">        if(j==0||j==i) &#123;</span><br><span class="line">            arr[i][j] = 1;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            arr[i][j] = arr[i-1][j]+arr[i-1][j-1];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(arr[i][j]+&quot;\t&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/23/%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E7%BB%93%E6%9E%9C.png"></p><h2 id="二维数组细节"><a href="#二维数组细节" class="headerlink" title="二维数组细节"></a>二维数组细节</h2><ol><li><p>一维数组的声明方式:<br>int[] x  或者 int x[]</p></li><li><p>二维数组的声明方式:<br>int[][] y 或者 int[] y[] 或者 int y[][]</p></li><li><p>二维数组实际上是有多个一维数组组成的,他的各个一维数组的长度可以相同,也可以不同<br>例如:<br><code>map [][] = &#123;&#123;1,2,3&#125;,&#123;1,2&#125;&#125;</code><br>称之为列数不等二维数组</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数组、排序和查找 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找</title>
      <link href="/2022/09/22/%E6%9F%A5%E6%89%BE/"/>
      <url>/2022/09/22/%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a><center>查找</h1><p>在Java中我们常用的查找有两种:<br>1.顺序查找<br>2.二分查找</p><h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><p>案例演示:<br>有一个数列:白眉鹰王、金毛狮王、紫衫龙王、青翼蝠王猜数游戏:从键盘中任意输入一个名称,判断数列中是否包含此名称[顺序查找]<br>要求:如果找到了，就提示找到，并给出下标值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//方法一:</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">String[] arr = &#123;&quot;白眉鹰王&quot;,&quot;金毛狮王&quot;,&quot;紫衫龙王&quot;,&quot;青翼蝠王&quot;&#125;;</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(&quot;请输入名称&quot;);</span><br><span class="line">    String name = sc.next();</span><br><span class="line">    for (int j = 0; j &lt; arr.length; j++) &#123;</span><br><span class="line">        if(name.equals(arr[j])) &#123;</span><br><span class="line">            System.out.println(&quot;找到了,下标值是:&quot;+j);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//方法二:</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">String[] arr = &#123;&quot;白眉鹰王&quot;,&quot;金毛狮王&quot;,&quot;紫衫龙王&quot;,&quot;青翼蝠王&quot;&#125;;</span><br><span class="line">System.out.println(&quot;请输入名称&quot;);</span><br><span class="line">String name = sc.next();</span><br><span class="line">int index = 0;</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    if(name.equals(arr[i])) &#123;</span><br><span class="line">        System.out.println(&quot;找到了,下标值是:&quot;+i);</span><br><span class="line">        index = i;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    if(index == 0) &#123;</span><br><span class="line">        System.out.println(&quot;没有符合的数据&quot;);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数组、排序和查找 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/2022/09/22/%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/09/22/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a><center>排序</h1><blockquote><p>排序是将多个数据，依指定的顺序进行排列的过程</p></blockquote><p>排序的分类:<br>1.内部排序:<br>指将需要处理的所有数据都加载到内部存储器中进行排序.包括交换式排序法、选择式排序法和插入式排序法;</p><p>2.外部排序<br>数据量过大,无法全部加载到内存中,需要借助外部存储进行排序.包括合并排序法和直接合并排序法.</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//冒泡排序  从小到大</span><br><span class="line">//写法一:</span><br><span class="line">int[] a = &#123;24,33,11,56,70,29&#125;;</span><br><span class="line">int b = 0;</span><br><span class="line">for (int i = 0; i &lt; a.length; i++) &#123;</span><br><span class="line">    for (int j = 0; j &lt; a.length; j++) &#123;</span><br><span class="line">        if(j&lt;(a.length-1)) &#123;</span><br><span class="line">            if(a[i]&lt;a[j]) &#123;</span><br><span class="line">                b = a[i];</span><br><span class="line">                a[i]=a[j];</span><br><span class="line">                a[j] = b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">for (int i = 0; i &lt; a.length; i++) &#123;</span><br><span class="line">    System.out.println(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">//写法二</span><br><span class="line">int[] a = &#123;1,2,3,4,5&#125;;</span><br><span class="line">int temp = 0;</span><br><span class="line">for (int i = 0; i &lt; a.length-1; i++) &#123;</span><br><span class="line">    for (int j = 0; j &lt; (a.length-i-1); j++) &#123;</span><br><span class="line">        //如果前面的数大于后面的数,就交换</span><br><span class="line">        if(a[j]&gt;a[j+1]) &#123;</span><br><span class="line">            temp = a[j];</span><br><span class="line">            a[j] = a[j+1];</span><br><span class="line">            a[j+1] = temp;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(temp == 0) &#123;</span><br><span class="line">        System.out.println(&quot;已经是循序排序&quot;);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(&quot;第&quot;+(i+1)+&quot;轮&quot;);</span><br><span class="line">    for (int j = 0; j &lt; a.length; j++) &#123;</span><br><span class="line">        System.out.print(a[j]+&quot;\t&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数组、排序和查找 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2022/09/20/%E6%95%B0%E7%BB%84/"/>
      <url>/2022/09/20/%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a><center>数组</h1><p>介绍:<br>可以存放多个同一类型的数据被称为数组.数组也是一种数据类型,是引用类型</p><p>快速入门:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int[] hens = &#123;3,4,2,1,6,8&#125;;</span><br><span class="line">//遍历数组</span><br><span class="line">for(int i=0;i&lt;6;i++)&#123;</span><br><span class="line">    System.out.println(hens[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h2><p>使用方式1:<br>定义:<br>数据类型 数组名[] &#x3D; new 数据类型[大小]<br><code>int a[] = new int[5]</code></p><p>使用方式2:<br>1.先声明数组<br>定义:<br>数据类型 数组名[];<br><code>int a[]; int[] a</code><br>2.创建数组<br>语法:数组名 &#x3D; new 数据类型[大小];<br><code>a = new int[10]</code></p><p>使用方式3:<br>定义:<br>数据类型 数组名[] &#x3D; {元素值,元素值,….}<br><code>int a[] = &#123;2,3,4,5,1,9&#125;</code><br>等价于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a[] = new int[6];</span><br><span class="line">a[0]=2;a[1]=3;a[2]=4;a[3]=5;a[4]=1;a[5]=9</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数组的细节"><a href="#数组的细节" class="headerlink" title="数组的细节"></a>数组的细节</h3><ol><li>数组中的元素可以是任何数据类型,包括基本类型和引用类型,但是不能混用。</li><li>数组创建后,如果没有赋值,有默认值int 0,short 0, byte 0, long 0, float 0.0,double 0.0,char \u0000,boolean false,String null</li><li>使用数组的步骤:<br>3.1. 声明数组并开辟空间<br>3.2. 给数组各个元素赋值<br>3.3. 使用数组</li><li>数组的下标从0开始的</li><li>数组下标必须在指定范围内使用,否则报 下标越界异常,比如:   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int [] arr=new int[5]; 则有效下标为 0-4 </span><br><span class="line">System.out.println(arr[4]); //最大下标是4</span><br><span class="line">System.out.println(arr[5]); //报下标越界错误</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>数组属于引用类型,数组型数据是对象</li><li>数组是多个相同类型数据的组合,实现对这些数据的统一管理</li></ol><h2 id="数组赋值的机制"><a href="#数组赋值的机制" class="headerlink" title="数组赋值的机制"></a>数组赋值的机制</h2><ol><li>基本数据类型赋值,这个值就是具体的数据,而且相互不影响。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//使用的是值传递/值拷贝</span><br><span class="line">int a =1;</span><br><span class="line">int b =a;</span><br><span class="line">b = 10;</span><br><span class="line">//a的值不会收到影响</span><br></pre></td></tr></table></figure></li><li>数组在默认情况下是引用传递,赋的值是地址。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//引用传递</span><br><span class="line">int[] arr1 = &#123;1,2,3&#125;;</span><br><span class="line">int[] arr2 = arr1;</span><br><span class="line">arr2[0] = 10;</span><br><span class="line">//数组将会被修改成 &#123;10,2,3&#125;</span><br><span class="line">//因为引用传递相当于将arr1的地址值复制到了arr2</span><br><span class="line">//直接修改arr2的时候相当于根据地址值找到了数据并直接修改数据</span><br></pre></td></tr></table></figure><img src="/2022/09/20/%E6%95%B0%E7%BB%84/%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92.png">;</li></ol><h2 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//将arr1拷贝到arr2,数据空间独立</span><br><span class="line">int[] arr1 = &#123;1,2,3&#125;;</span><br><span class="line">//创建一个新的数组arr2,开辟新的数据空间</span><br><span class="line">int[] arr2 = new int[arr1.length];</span><br><span class="line">for(int i=0;i&lt;arr1.length;i++) &#123;</span><br><span class="line">    arr2[i]=arr1[i];</span><br><span class="line">    System.out.println(&quot;arr2=&quot;+arr2[i]);</span><br><span class="line">&#125;</span><br><span class="line">//这样就不会对arr1有影响了</span><br></pre></td></tr></table></figure><h2 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">第一种方式:</span><br><span class="line">int[] arr1 = &#123;1,2,3,4,5,6&#125;;</span><br><span class="line">int a = arr1.length;</span><br><span class="line">int temp = 0;</span><br><span class="line">for(int i=0;i&lt;a/2;i++) &#123;</span><br><span class="line">    temp = arr1[a-1-i];</span><br><span class="line">    arr1[a-1-i] = arr1[i];</span><br><span class="line">    arr1[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=0;i&lt;arr1.length;i++) &#123;</span><br><span class="line">    System.out.println(arr1[i]);</span><br><span class="line">&#125;</span><br><span class="line">第二种方式:</span><br><span class="line">int[] arr1 = &#123;1,2,3,4,5,6&#125;;</span><br><span class="line">int[] arr2 = new int[arr1.length];</span><br><span class="line">for (int i = arr1.length-1,j = 0; i &lt; arr1.length; i--,j++) &#123;</span><br><span class="line">    arr2[j] = arr1[i];</span><br><span class="line">    System.out.println(arr2[j]);</span><br><span class="line">&#125;</span><br><span class="line">第三种方法:</span><br><span class="line">int[] arr1 = &#123;1,2,3,4,5,6&#125;;</span><br><span class="line">int[] arr2 = new int[arr1.length];</span><br><span class="line">int a = arr1.length;</span><br><span class="line">for(int i=0;i&lt;arr1.length;i++) &#123;</span><br><span class="line">    a--;</span><br><span class="line">    arr2[i]=arr1[a];</span><br><span class="line">&#125;</span><br><span class="line">for(int i=0;i&lt;arr1.length;i++) &#123;</span><br><span class="line">    System.out.println(arr2[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组添加"><a href="#数组添加" class="headerlink" title="数组添加"></a>数组添加</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = new Scanner(System.in); </span><br><span class="line">//初始化数组</span><br><span class="line">int[] a = &#123;1,2,3&#125;;</span><br><span class="line">for(int i = 0;;i++) &#123;</span><br><span class="line">    int[] a2 = new int[a.length+1];</span><br><span class="line">    System.out.println(&quot;请添加&quot;);</span><br><span class="line">    int b = sc.nextInt();</span><br><span class="line">    //遍历数组,将a的元素拷贝到a2数组中</span><br><span class="line">    for (int j = 0; j &lt; a.length; j++) &#123;</span><br><span class="line">        a2[j] = a[j];</span><br><span class="line">    &#125;</span><br><span class="line">    //将用户输入的数赋给a2的最后一个元素</span><br><span class="line">    a2[a2.length-1] = b;</span><br><span class="line">    //让a指向a2</span><br><span class="line">    a = a2;</span><br><span class="line">    System.out.println(&quot;添加成功是,否继续添加y/n&quot;);</span><br><span class="line">    String c = sc.next();</span><br><span class="line">    if(c.equals(&quot;n&quot;)) &#123;</span><br><span class="line">        System.out.println(&quot;退出添加&quot;);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">//输出a 查看效果</span><br><span class="line">for(int i = 0;i&lt;a.length;i++) &#123;</span><br><span class="line">    System.out.println(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数组缩减"><a href="#数组缩减" class="headerlink" title="数组缩减"></a>数组缩减</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = new Scanner(System.in); </span><br><span class="line">//int len = 1; </span><br><span class="line">int[] a = &#123;1,2,3,4,5&#125;;</span><br><span class="line">for(int i = 0;;i++) &#123;</span><br><span class="line">    System.out.println(&quot;是否缩减,y/n&quot;);</span><br><span class="line">    String c = sc.next();</span><br><span class="line">    if(c.equals(&quot;n&quot;)) &#123;</span><br><span class="line">        System.out.println(&quot;退出缩减&quot;);</span><br><span class="line">        break;</span><br><span class="line">    &#125;else if(c.equals(&quot;y&quot;)) &#123;</span><br><span class="line">        int[] a2 = new int[a.length-1];</span><br><span class="line">        for (int j = 0; j &lt; a2.length; j++) &#123;</span><br><span class="line">            a2[j] = a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        a = a2;</span><br><span class="line">        if(a.length==1) &#123;</span><br><span class="line">            System.out.println(&quot;不能在缩减了&quot;);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">for(int i = 0;i&lt;a.length;i++) &#123;</span><br><span class="line">    System.out.println(a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数组、排序和查找 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跳转控制语句</title>
      <link href="/2022/09/19/%E8%B7%B3%E8%BD%AC%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
      <url>/2022/09/19/%E8%B7%B3%E8%BD%AC%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a><center>跳转控制语句</h1><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p>基本介绍:<br>break 语句用于终止某个语句块的执行,一般使用在switch 或者for、while、do-while循环中<br>基本语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;   ...</span><br><span class="line">    break;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int rendomNumber;</span><br><span class="line">int count = 0;</span><br><span class="line">while(true) &#123;</span><br><span class="line">    rendomNumber=(int)(Math.random()*100)+1;</span><br><span class="line">    if(rendomNumber==97) &#123;</span><br><span class="line">        break;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure><h3 id="break细节与注意事项"><a href="#break细节与注意事项" class="headerlink" title="break细节与注意事项:"></a>break细节与注意事项:</h3><ol><li>break语句出现在多层嵌套的语句块中时,可以通过标签指明要终止的是哪一层语句块</li><li>标签的基本使用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">label1:&#123;</span><br><span class="line">    label2:&#123;</span><br><span class="line">        lable3:&#123;</span><br><span class="line">            break label2:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line">1.break 语句可以指定退出哪层</span><br><span class="line">2.label1是标签,名字由程序员指定</span><br><span class="line">3.break后指定到哪个label就退出到哪里</span><br><span class="line">4.在实际的开发中,尽量不要使用标签.</span><br><span class="line">5.如果没有指定break,默认退出最近的循环体</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p>基本介绍:</p><ol><li>continue 语句用于结束本次循环,继续执行下一次循环。</li><li>continue 语句出现在多层嵌套的循环语句体中时,可以通过标签指明要跳过的是哪一层循环 , 这个和前面的标签的使用的规则一样</li></ol><p>基本语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;   ...</span><br><span class="line">    continue;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int i =0;</span><br><span class="line">while(i&lt;4)&#123;</span><br><span class="line">    i++;</span><br><span class="line">    if(i==2)&#123;</span><br><span class="line">        System.out.println(&quot;退出&quot;);</span><br><span class="line">        continue;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(&quot;i=&quot;+i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="continue细节与注意事项"><a href="#continue细节与注意事项" class="headerlink" title="continue细节与注意事项:"></a>continue细节与注意事项:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">label1:</span><br><span class="line">for(int j = 0; j &lt; 4; j++)&#123;</span><br><span class="line">label2:</span><br><span class="line">    for(int i = 0; i &lt; 10; i++)&#123;</span><br><span class="line">    if(i == 2)&#123;</span><br><span class="line">    //看看分别输出什么值,并分析</span><br><span class="line">    //continue;</span><br><span class="line">    //continue label2;</span><br><span class="line">    continue label1;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(&quot;i = &quot; + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="return"><a href="#return" class="headerlink" title="return"></a>return</h2><p>return 表示跳出所在的方法。注意：如果 return 写在 main 方法中则代表退出程序Return01.java</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 控制结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>控制结构</title>
      <link href="/2022/09/15/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/"/>
      <url>/2022/09/15/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a><center>控制结构</h1><h2 id="顺序控制"><a href="#顺序控制" class="headerlink" title="顺序控制"></a>顺序控制</h2><p>顺序控制介绍:<br>程序从上至下逐行执行,中间没有任何判断和跳转</p><h2 id="分支控制-if-else-switch"><a href="#分支控制-if-else-switch" class="headerlink" title="分支控制(if,else,switch)"></a>分支控制(if,else,switch)</h2><h3 id="单分支"><a href="#单分支" class="headerlink" title="单分支"></a>单分支</h3><p>基本语法:<br>if(条件表达式){<br>    代码执行块;<br>}<br>当条件为true的时候,就会执行{}中的代码,如果为false就不会执行</p><h3 id="双分支"><a href="#双分支" class="headerlink" title="双分支"></a>双分支</h3><p>if-else介绍:<br>让程序由选择的执行(根据某一个判断,选择不同的执行路径)</p><p>基本语法:<br>if(条件表达式){<br>    代码执行块1;<br>}else{<br>    代码执行块2;<br>}<br>当条件为true的时候,就会执行代码执行块1;,如果为false就会执行代码执行块2;</p><h3 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h3><p>基本语法:<br>if(条件表达式1){<br>    代码执行块1;<br>}else if(条件表达式2){<br>    代码执行块2;<br>}else{<br>    代码执行块…;<br>}<br>特别说明:</p><ol><li>多分支可以没有else,如果所有的条件表达式都不成立,则一个执行入口都没有</li><li>如果有else,如果所有的条件表达式都不成立,则默认执行else的{}</li></ol><h3 id="嵌套分支"><a href="#嵌套分支" class="headerlink" title="嵌套分支"></a>嵌套分支</h3><p>基本介绍:<br>在一个分支结构中又完整的嵌套了另一个完整的分支结构,里面的分支称为内层分支外面的分支称为外层分支。建议最多不要超过三层可读性不好<br>基本语法:<br>if(){<br>    if(){<br>        &#x2F;&#x2F;if-else<br>    }else{<br>        &#x2F;&#x2F;if-else<br>    }<br>}</p><h3 id="switch分支结构"><a href="#switch分支结构" class="headerlink" title="switch分支结构"></a>switch分支结构</h3><p>语法:<br>switch(表达式){<br>    case 常量1:<br>    语句块1;<br>    break;<br>    case 常量2:<br>    语句块2;<br>    break;<br>    case 常量n:<br>    语句块n;<br>    break;<br>    default:<br>    default语句块;<br>    break;<br>}</p><ol><li>switch 关键字,表示switch分支</li><li>表达式对应一个值</li><li>case 常量1:当表达式的值等于常量1,就执行语句块1</li><li>break; 表示退出swtich</li><li>如果和case 常量1匹配就执行语句块1,如果没有匹配,就继续匹配case 常量2</li><li>如果一个都没有匹配上,执行default</li></ol><p>switch细节:</p><ol><li>表达式数据类型,应该和case后的常量类型一致,或者是可以自动转换成可以相互比较的类型,举例:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">char c = &#x27;a&#x27;;</span><br><span class="line">switch(c)&#123;</span><br><span class="line">    case &#x27;a&#x27;:</span><br><span class="line">        System.out.println(&quot;1&quot;);</span><br><span class="line">        break;</span><br><span class="line">    case 20:</span><br><span class="line">        System.out.println(&quot;2&quot;);</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        System.out.println(&quot;3&quot;);</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Switch(表达式)中,表达式的返回值必须是byte,shout,int,String,char,enum[枚举]</li><li>case字句中的值必须是常量,不能是变量</li><li>可以不写default</li><li>break语句用来执行完一个case分支后使程序跳出switch语句块,如果没有写break程序会顺序执行到switch结尾</li></ol><h3 id="if和switch的选择"><a href="#if和switch的选择" class="headerlink" title="if和switch的选择"></a>if和switch的选择</h3><ol><li>如果判断的具体的数值不多而且符合byte、short、intchar、enum、String这六种类型,虽然两个语句都可以使用,建议使用swtich语句</li><li>其他情况:对区间判断,对结果为booean类型判断,使用if</li></ol><h2 id="循环控制-for-while-dowhile-多重循环"><a href="#循环控制-for-while-dowhile-多重循环" class="headerlink" title="循环控制(for,while,dowhile,多重循环)"></a>循环控制(for,while,dowhile,多重循环)</h2><blockquote><p>让你的代码可以循环运行称为循环控制</p></blockquote><h3 id="for循环控制"><a href="#for循环控制" class="headerlink" title="for循环控制"></a>for循环控制</h3><p>基本语法:<br>写法1:<br>for(循环变量初始化:循环条件:循环变量迭代){<br>    循环操作(语句);<br>}<br>写法2:<br>int i &#x3D; 1;<br>for(;i&lt;&#x3D;10;) {<br>    i++;<br>}<br>写法3:<br>for(;;){&#x2F;&#x2F;表示一个无限循环</p><p>}<br>说明:</p><ol><li>for 关键字,表示循环控制</li><li>for循环有四要素:<br> 2.1. 循环变量初始化<br> 2.2. 循环条件<br> 2.3. 循环操作<br> 2.4. 循环变量迭代</li><li>循环操作:这里可以有多条语句,也就是我们要执行的代码</li><li>如果循环操作只有一条语句可以省略大括号</li></ol><p>for 循环细节:</p><ol><li>循环条件返回的是一个布尔值的表达式</li><li>fr(;循环判断条件;)中的初始化和变量迭代可以写到其他地方,但是两个分号不能省略</li><li>循环初始值可以有多条初始化语句,但要求类型一样,并且中间用逗号隔开</li></ol><p>*编程思想(技巧):</p><ol><li>化繁为简:即将复杂的需求拆解成简单的需求,逐步完成</li><li>先死后活:先考虑固定的值,然后转成可以灵活变量的值</li></ol><h3 id="while循环控制"><a href="#while循环控制" class="headerlink" title="while循环控制"></a>while循环控制</h3><p>基本语法:<br>循环变量初始化<br>while(循环条件){<br>    循环体(语句);<br>    循环变量迭代;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int i=0;    //循环变量初始化</span><br><span class="line">while(i&lt;10) &#123;   //循环条件</span><br><span class="line">    i++;        //循环迭代</span><br><span class="line">    System.out.println(&quot;yang&quot;+i);   //循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>while循环细节:</p><ol><li>循环条件是返回一个布尔值的表达式</li><li>while循环是先判断在执行</li></ol><h3 id="do…while循环控制"><a href="#do…while循环控制" class="headerlink" title="do…while循环控制"></a>do…while循环控制</h3><p>基本语法:<br>循环变量初始化<br>do{<br>    循环体(语句);<br>    循环变量迭代;<br>}while(循环条件);</p><p>说明:</p><ol><li>do while是关键字</li><li>先执行后判断</li><li>最后有一个分号</li></ol><p>细节:</p><ol><li>循环条件返回的是一个布尔值</li><li>do…while循环是先执行,在判断,因此它至少执行一次</li></ol><h3 id="多重循环"><a href="#多重循环" class="headerlink" title="*多重循环"></a>*多重循环</h3><p>介绍:</p><ol><li>将一个循环放在另一个循环体内,就形成了循环嵌套,其中for循环、while循环、do…while循环均可以作为外层循环和内层循环.建议一般使用两层循环,最多不要超过三层否则代码可读性很差</li><li>循环嵌套就是把内层循环当成外层循环的循环体,当只有内层循环的循环条件为false时才能完全跳出内层循环,才可结束外层的当次循环</li><li>设外层循环次数为m,内层为n,则内层循环体实际上需要执行m*n次</li></ol><h3 id="多重循环经典题目-打印空心金字塔"><a href="#多重循环经典题目-打印空心金字塔" class="headerlink" title="多重循环经典题目 打印空心金字塔"></a>多重循环经典题目 打印空心金字塔</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">化繁为简</span><br><span class="line">1. 打印出半个金字塔</span><br><span class="line">    for(int i=1;i&lt;=5;i++)&#123;</span><br><span class="line">        for(int j=1;j&lt;=i;j++)&#123;</span><br><span class="line">            System.out.print(&quot;*&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">2. 打印出实心金字塔</span><br><span class="line">    *       //1     //空格数是4</span><br><span class="line">   ***      //3     //空格数是3</span><br><span class="line">  *****     //5     //空格数是2</span><br><span class="line"> *******    //7     //空格数是1</span><br><span class="line">*********   //9     //空格数是0</span><br><span class="line">找到实心金字塔的规律</span><br><span class="line">每列相差2个星星</span><br><span class="line">每列的星星 = 2*列数-1;  2*i-1</span><br><span class="line">空格数是总层数-列数; 5-i</span><br><span class="line">    for(int i=1;i&lt;=5;i++)&#123;</span><br><span class="line">        for(int k=1;k&lt;=5-i;k++)&#123;</span><br><span class="line">            System.out.print(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        for(int j=1;j&lt;=2*i-1;j++)&#123;</span><br><span class="line">            System.out.print(&quot;*&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">3. 打印一个空心金字塔</span><br><span class="line">    *           //分析</span><br><span class="line">   * *          //除了最后一行,每行只打印第一颗和第二颗星星</span><br><span class="line">  *   *</span><br><span class="line"> *     *</span><br><span class="line">*********</span><br><span class="line">第一颗星星 j=1;</span><br><span class="line">最后一颗星星 j=2*i-1</span><br><span class="line">添加一个if判断判断现在是第几颗星星</span><br><span class="line">    for(int i=1;i&lt;=5;i++)&#123;</span><br><span class="line">        for(int k=1;k&lt;=5-i;k++)&#123;</span><br><span class="line">            System.out.print(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        for(int j=1;j&lt;=2*i-1;j++)&#123;</span><br><span class="line">            if(j==1||j==2*i-1||i==5)&#123;</span><br><span class="line">                System.out.print(&quot;*&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                System.out.print(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">先死后活</span><br><span class="line">将总层数改为变量,打印一个随机层数的空心三角形;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int level = sc.nextInt;</span><br><span class="line">for(int i=1;i&lt;=level;i++)&#123;</span><br><span class="line">        for(int k=1;k&lt;=level-i;k++)&#123;</span><br><span class="line">            System.out.print(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        for(int j=1;j&lt;=2*i-1;j++)&#123;</span><br><span class="line">            if(j==1||j==2*i-1||i==level)&#123;</span><br><span class="line">                System.out.print(&quot;*&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                System.out.print(&quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="多重循环经典题目-打印菱形"><a href="#多重循环经典题目-打印菱形" class="headerlink" title="多重循环经典题目 打印菱形"></a>多重循环经典题目 打印菱形</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">化繁为简</span><br><span class="line">1.打印一个实心三角形</span><br><span class="line">    *       //1     //空格数是4</span><br><span class="line">   ***      //3     //空格数是3</span><br><span class="line">  *****     //5     //空格数是2</span><br><span class="line"> *******    //7     //空格数是1</span><br><span class="line">*********   //9     //空格数是0</span><br><span class="line">找到实心三角形的规律</span><br><span class="line">每列相差2个星星</span><br><span class="line">每列的星星 = 2*列数-1;  2*i-1</span><br><span class="line">空格数是总层数-列数; 5-i</span><br><span class="line">    for(int i=1;i&lt;=5;i++)&#123;</span><br><span class="line">        for(int j=1;j&lt;=2*i-1;j++)&#123;</span><br><span class="line">            System.out.print(&quot;*&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">2.打印一个实心倒三角形</span><br><span class="line">*********   //9     //空格数是0</span><br><span class="line"> *******    //7     //空格数是1</span><br><span class="line">  *****     //5     //空格数是2</span><br><span class="line">   ***      //3     //空格数是3</span><br><span class="line">    *       //1     //空格数是4</span><br><span class="line">找到实心倒三角形的规律</span><br><span class="line">每列相差2个星星</span><br><span class="line">每列的星星 = 2*列数-1;  2*i-1</span><br><span class="line">空格数是总层数-列数; 5-i</span><br><span class="line">    for(int i=5;i&gt;=1;i--)&#123;      //控制层数</span><br><span class="line">        for(int k=1;k&lt;=level-i;k++)&#123;</span><br><span class="line">            System.out.print(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //控制每层的星星数</span><br><span class="line">        for(int j=1;j&lt;=2*i-1;j++)&#123;</span><br><span class="line">            System.out.print(&quot;*&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">3. 组合打印</span><br><span class="line">    for(int i=1;i&lt;=5;i++)&#123;//正三角</span><br><span class="line">for(int k = 1;k &lt;= 5-i;k++) &#123;</span><br><span class="line">            System.out.print(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        for(int j=1;j&lt;=2*i-1;j++)&#123;</span><br><span class="line">            System.out.print(&quot;*&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">for(int i=5-1;i&gt;=1;i--)&#123;      //控制层数倒三角</span><br><span class="line">        for(int k=1;k&lt;=5-i;k++)&#123;</span><br><span class="line">            System.out.print(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //控制每层的星星数</span><br><span class="line">        for(int j=1;j&lt;=2*i-1;j++)&#123;</span><br><span class="line">            System.out.print(&quot;*&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">先死后活</span><br><span class="line">    int level = 5;</span><br><span class="line">    for(int i=1;i&lt;=level;i++)&#123;//正三角</span><br><span class="line">        for(int k = 1;k &lt;= level-i;k++) &#123;</span><br><span class="line">            System.out.print(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        for(int j=1;j&lt;=2*i-1;j++)&#123;</span><br><span class="line">            System.out.print(&quot;*&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=level-1;i&gt;=1;i--)&#123;      //控制层数倒三角</span><br><span class="line">        for(int k=1;k&lt;=level-i;k++)&#123;</span><br><span class="line">            System.out.print(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //控制每层的星星数</span><br><span class="line">        for(int j=1;j&lt;=2*i-1;j++)&#123;</span><br><span class="line">            System.out.print(&quot;*&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 控制结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算</title>
      <link href="/2022/09/15/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/2022/09/15/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h2><ol><li>原码（0表示正数,1表示负数）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x=1100110,则[X]原=01100110</span><br><span class="line">x=-1100111,则[X]原=11100111</span><br><span class="line">无符号位 </span><br><span class="line">00000000~11111111       0~255</span><br><span class="line">有符号位 </span><br><span class="line">11111111~01111111       -127~+127</span><br></pre></td></tr></table></figure></li><li>反码(正数的反码就是自身,负数的反码除符号位外,其他各位求反)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x=1100110,则[X]反=01100110</span><br><span class="line">x=-1100111,则[X]反=10011000</span><br><span class="line">反码肯定属于有符号位,相当于上面有符号位求反</span><br><span class="line">10000000~01111111       -127~+127</span><br></pre></td></tr></table></figure></li><li>补码(正数的补码还是自身,负数的补码,符号位不变,其余取反,然后最低为加1)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x=1100110,则[X]补=01100110</span><br><span class="line">x=-1100111,则[X]补=10011001</span><br><span class="line">10000001~01111111 -128~+127</span><br></pre></td></tr></table></figure>总结:<br>对于有符号而言:</li><li>二进制的最高位是符号位:0表示正数,1表示负数</li><li>正数的原码,反码,补码都一样(三码合一)</li><li>负数的反码&#x3D;它的原码符号位不变,其它位取反(0-&gt;1,1-&gt;0)</li><li>负数的补码&#x3D;它的反码+1,负数的反码&#x3D;负数的补码-1</li><li>0的反码、补码都是0</li><li>java中没有无符号数,换言之,java中的数都是有符号的</li><li>在计算机运算的时候,都是以补码的方式来运算的.</li><li>当我们看运算结果的时候,要看他的原码</li></ol><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>Java中有7个位运算&amp;,|,^,~,&gt;&gt;,&lt;&lt;,&gt;&gt;&gt;<br>按位与&amp;: 两位全为1,结果为1,否则为0<br>按位或|: 两位有一个为1,结果为1,否则为0<br>按位异或^: 两位一个为1,一个为0,结果为1否则为0<br>按位取反~: 0-&gt;1,1-&gt;0</p><p>案例:<br>2&amp;3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2&amp;3</span><br><span class="line">0010</span><br><span class="line">0011</span><br><span class="line">0010</span><br><span class="line">结果为2</span><br></pre></td></tr></table></figure><p>~-2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">先得到原码</span><br><span class="line">10000000 00000000 00000000 00000010</span><br><span class="line">在得到反码</span><br><span class="line">11111111 11111111 11111111 11111101</span><br><span class="line">在得到补码</span><br><span class="line">11111111 11111111 11111111 11111110</span><br><span class="line">补码在取反~</span><br><span class="line">00000000 00000000 00000000 00000001</span><br><span class="line">取反之后是正数</span><br><span class="line">正数三码合一所以原码是</span><br><span class="line">00000000 00000000 00000000 00000001</span><br><span class="line">结果为1</span><br></pre></td></tr></table></figure><p>~2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">先得到原码 正数三码合一</span><br><span class="line">00000000 00000000 00000000 00000010</span><br><span class="line">补码是</span><br><span class="line">00000000 00000000 00000000 00000010</span><br><span class="line">补码在取反~</span><br><span class="line">11111111 11111111 11111111 11111101</span><br><span class="line">取反之后是负数</span><br><span class="line">所以要得到原码就要先得到反码 负数的反码是补码减一</span><br><span class="line">11111111 11111111 11111111 11111100</span><br><span class="line">在得到原码</span><br><span class="line">符号位不变其他位取反</span><br><span class="line">10000000 00000000 00000000 00000011</span><br><span class="line">结果为-3</span><br></pre></td></tr></table></figure><p>位运算符:<br>算术右移&gt;&gt;: 低位溢出,符号位不变,用符号位补溢出的高位<br>算术左移&lt;&lt;: 符号位不变,低位补0<br>逻辑右移&gt;&gt;&gt;: 逻辑右移也叫无符号右移,运算规则是:低位溢出.高位补0</p><p>案例:<br>int a&#x3D;1&gt;&gt;2;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 = 00000000 00000000 00000000 00000001&gt;&gt;2</span><br><span class="line">算术右移&gt;&gt;: 低位溢出,符号位不变,用符号位补溢出的高位</span><br><span class="line">    00000000 00000000 00000000 00000000</span><br><span class="line">本质就是1/2/2</span><br></pre></td></tr></table></figure><p>int b&#x3D;1&lt;&lt;2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 = 00000000 00000000 00000000 00000001&lt;&lt;2</span><br><span class="line">算术左移&lt;&lt;: 符号位不变,低位补0</span><br><span class="line">    00000000 00000000 00000000 00000100</span><br><span class="line">本质就是1*2*2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 运算符 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制</title>
      <link href="/2022/09/15/%E8%BF%9B%E5%88%B6/"/>
      <url>/2022/09/15/%E8%BF%9B%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a><center>进制</h1><p>对于整数,有四种表示方式:<br>二进制:0,1 满 2 进 1.以 0b 或 0B 开头<br>十进制:0-9 满 10 进 1<br>八进制:0-7 满 8 进 1. 以数字 0 开头表示<br>十六进制:0-9 及 A(10)-F(15) 满 16 进 1. 以 0x 或 0X 开头表示.此处的 A-F不区分大小写</p><h2 id="进制的转换"><a href="#进制的转换" class="headerlink" title="进制的转换"></a>进制的转换</h2><h3 id="二进制转十进制"><a href="#二进制转十进制" class="headerlink" title="二进制转十进制"></a>二进制转十进制</h3><p>规则:<br>从最低位开始,将每个位上的数提取出来,乘以2的(位数减一)次方,然后求和<br>举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0b110</span><br><span class="line">0*2^(1-1)+1*2^(2-1)+1*2^(3-1)</span><br><span class="line">=6</span><br></pre></td></tr></table></figure><h3 id="八进制转十进制"><a href="#八进制转十进制" class="headerlink" title="八进制转十进制"></a>八进制转十进制</h3><p>规则:<br>从最低位开始,将每个位上的数提取出来,乘以8的(位数减一)次方,然后求和<br>举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">023</span><br><span class="line">3*8^(1-1)+2*8^(2-1)</span><br><span class="line">=19</span><br></pre></td></tr></table></figure><h3 id="十六进制转十进制"><a href="#十六进制转十进制" class="headerlink" title="十六进制转十进制"></a>十六进制转十进制</h3><p>规则:<br>从最低位开始,将每个位上的数提取出来,乘以16的(位数减一)次方,然后求和<br>举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x2A</span><br><span class="line">10*16^(1-1)+2*16^(2-1)</span><br><span class="line">=42</span><br></pre></td></tr></table></figure><h3 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h3><p>规则:<br>将该数不断除以 2,直到商为 0 为止,然后将每步得到的余数倒过来,就是对应的二进制<br><img src="/2022/09/15/%E8%BF%9B%E5%88%B6/2%E8%BF%9B%E5%88%B6%E8%BD%AC10%E8%BF%9B%E5%88%B6.png"><br>举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">32</span><br><span class="line">2|32    ...0</span><br><span class="line"> 2|16   ...0</span><br><span class="line">  2|8   ...0</span><br><span class="line">   2|4  ...0</span><br><span class="line">    2|2 ...0</span><br><span class="line">     2|1    ...1</span><br><span class="line">       0        </span><br><span class="line"></span><br><span class="line">结果0b100000</span><br></pre></td></tr></table></figure><h3 id="十进制转八进制"><a href="#十进制转八进制" class="headerlink" title="十进制转八进制"></a>十进制转八进制</h3><p>规则:<br>将该数不断除以 8,直到商为 0 为止,然后将每步得到的余数倒过来,就是对应的八进制<br>举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">32</span><br><span class="line">8|32    ...0</span><br><span class="line"> 8|4    ...4</span><br><span class="line">   0</span><br><span class="line"></span><br><span class="line">结果040</span><br></pre></td></tr></table></figure><h3 id="十进制转十六进制"><a href="#十进制转十六进制" class="headerlink" title="十进制转十六进制"></a>十进制转十六进制</h3><p>规则:<br>将该数不断除以 16,直到商为 0 为止,然后将每步得到的余数倒过来,就是对应的十六进制<br>举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">132</span><br><span class="line">16|132  ...4</span><br><span class="line"> 16|8   ...8</span><br><span class="line">    0</span><br><span class="line">结果0x84</span><br></pre></td></tr></table></figure><h3 id="八进制转二进制"><a href="#八进制转二进制" class="headerlink" title="八进制转二进制"></a>八进制转二进制</h3><p>规则：将八进制数每 1 位,转成对应的一个3位的二进制数<br>举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0237</span><br><span class="line">2-&gt;010</span><br><span class="line">3-&gt;011</span><br><span class="line">7-&gt;111</span><br><span class="line"></span><br><span class="line">结果是:0b10011111</span><br></pre></td></tr></table></figure><h3 id="十六进制转二进制"><a href="#十六进制转二进制" class="headerlink" title="十六进制转二进制"></a>十六进制转二进制</h3><p>规则：将八进制数每 1 位,转成对应的一个4位的二进制数<br>举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x23B</span><br><span class="line">2-&gt;0010</span><br><span class="line">3-&gt;0011</span><br><span class="line">11(b)-&gt;1011</span><br><span class="line"></span><br><span class="line">结果是:0b1000111011</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 运算符 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>键盘输入语句</title>
      <link href="/2022/09/15/%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E8%AF%AD%E5%8F%A5/"/>
      <url>/2022/09/15/%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="键盘输入语句"><a href="#键盘输入语句" class="headerlink" title="键盘输入语句"></a><center>键盘输入语句</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在编程中，需要接收用户输入的数据,就可以使用键盘输入语句来获取。Input.java , 需要一个 扫描器(对象), 就是Scanner</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.yqy;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;//表示把 java.util 下的Scanner类导入</span><br><span class="line"></span><br><span class="line">public class Input &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//调用Scanner</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">//定义一个变量接收输入的数据</span><br><span class="line">int a;</span><br><span class="line">int b;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入数字1&quot;);</span><br><span class="line">        //接收用户输入</span><br><span class="line">a=sc.nextInt();</span><br><span class="line">System.out.println(&quot;请输入数字2&quot;);</span><br><span class="line">        //接收用户输入</span><br><span class="line">b=sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(a+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 运算符 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标识符的命名规则和规范</title>
      <link href="/2022/09/15/%E6%A0%87%E8%AF%86%E7%AC%A6%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%E5%92%8C%E8%A7%84%E8%8C%83/"/>
      <url>/2022/09/15/%E6%A0%87%E8%AF%86%E7%AC%A6%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%E5%92%8C%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="标识符的命名规则和规范"><a href="#标识符的命名规则和规范" class="headerlink" title="标识符的命名规则和规范"></a><center>标识符的命名规则和规范</h1><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>概念:</p><ol><li>Java中对各种变量、方法和类等命名时使用的字符序列被称为标识符</li><li>凡是自己可以起名字的地方都叫标识符例如:int num &#x3D; 90; num就是标识符</li></ol><p>规范:</p><ol><li>由26个英文字母大小写,0-9,_或$组成</li><li>不可以由数字开头</li><li>不可以使用关键字和保留字</li><li>Java中严格区分大小写</li><li>标识符不能包含空格</li></ol><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><ol><li>包名:多单词组成时所有字母都小写:aaa.bbb.ccc<br>比如:com.yqy.text</li><li>类名、接口名:多单词组成时,所有单词的首字母大写:XxxYyyZzz [大驼峰]<br>比如:TankShotGame</li><li>变量名、方法名:多单词组成时,第一个单词首字母小写,从第二个单词开始每个单词首字母大写:xxxYyyZzz [小驼峰,简称驼峰法]<br>比如:tankShotGam</li><li>常量名:所有字母都大写。多单词时每个单词用下划线连接:XXX_YYY_ZZZ<br>比如:定义一个所得税率 TAX_RATE</li></ol><h2 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h2><p>关键字定义:被 Java 语言赋予了特殊含义,用做专门用途的字符串<br>关键字特点:关键字中所有字母都为小写<br>保留字:现有 Java 版本尚未使用,但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字<br><img src="/%E5%85%B3%E9%94%AE%E5%AD%97.png"><br>关键字一律用小写字母标识,按其用途划分为如下几组。</p><ol><li>用于数据类型:<br>用于数据类型的关键字有 boolean、byte、char、 double、 float、int、long、new、short、void、instanceof。</li><li>用于语句:<br>用于语句的关键字有break、case、 catch、 continue、 default 、do、 else、 for、 if、return、switch、try、 while、 finally、 throw、this、 super。</li><li>用于修饰:<br>用于修饰的关键字有 abstract、final、native、private、 protected、public、static、synchronized、<br>transient、 volatile。</li><li>用于方法、类、接口、包和异常:<br>用于方法、类、接口、包和异常的关键字有 class、 extends、 implements、interface、 package、import、throws。</li></ol><p>* 还有些关键字,如 future、 generic、 operator、 outer、rest、var等都是Java保留的没有意义的关键字,另外,Java还有3个保留字:goto、const、null。它们不是关键字,而是文字。包含Java定义的值。和关键字一样,它们也不可以作为标识符使用。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 运算符 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符</title>
      <link href="/2022/09/15/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2022/09/15/%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><center>运算符</h1><blockquote><p>运算符是一种特殊的符号用于表示数据的运算、赋值和比较等</p></blockquote><p>运算符分为以下几种:</p><ol><li>算术运算符</li><li>赋值运算符</li><li>关系运算符[比较运算符]</li><li>逻辑运算符</li><li>三元运算符</li><li>位运算符</li></ol><p>* 这里只介绍前5种运算符 位运算符在进制篇章之后</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p><img src="/2022/09/15/%E8%BF%90%E7%AE%97%E7%AC%A6/1_1.png"></p><h3 id="算术运算符细节"><a href="#算术运算符细节" class="headerlink" title="算术运算符细节"></a>算术运算符细节</h3><ol><li>对于除号”&#x2F;“来言,它的整数除和小数除是有区别的,整数之间做除法时,只保留整数部分而舍弃小数部分。例如:<br><code>int x= 10/3   //结果是3</code></li><li>取模的本质就是: a%b &#x3D; a-a&#x2F;b*b</li><li>当 自增&#x2F;自减 作为一个独立语言使用时,++i和i++等价</li><li>当 自增&#x2F;自减 作为一个表达式j&#x3D;++i使用时 等价于i&#x3D;i+1; j&#x3D;i</li><li>当 自增&#x2F;自减 作为一个表达式j&#x3D;i++使用时 等价于j&#x3D;i; i&#x3D;i+1</li></ol><h3 id="算术运算符例题"><a href="#算术运算符例题" class="headerlink" title="算术运算符例题"></a>算术运算符例题</h3><ol><li>int i &#x3D; 1;i&#x3D;i++; i&#x3D;?<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int i = 1;  //i-&gt;1</span><br><span class="line">i = i++;    //规则使用临时变量: (1) temp=i;(2) i=i+1;(3)i=temp;</span><br><span class="line">// System.out.println(i); // 1</span><br></pre></td></tr></table></figure></li><li>int i &#x3D; 1;i&#x3D;++i; i&#x3D;?<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int i = 1;   //i-&gt;1</span><br><span class="line">i = ++i;    //规则使用临时变量: (1) i=i+1;(2) temp=i;(3)i=temp;</span><br><span class="line">System.out.println(i); // 2</span><br></pre></td></tr></table></figure></li></ol><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><ol><li>关系运算符的结果都是 boolean 型，也就是要么是 true，要么是 false</li><li>关系表达式 经常用在 if 结构的条件中或循环结构的条件中<br><img src="/2022/09/15/%E8%BF%90%E7%AE%97%E7%AC%A6/1_2.png"></li></ol><h3 id="关系运算符细节"><a href="#关系运算符细节" class="headerlink" title="关系运算符细节"></a>关系运算符细节</h3><ol><li>关系运算符的结果都是 boolean 型，也就是要么是 true，要么是 false</li><li>关系运算符组成的表达式，我们称为关系表达式。</li><li>比较运算符”&#x3D;&#x3D;”不能误写成”&#x3D;”</li></ol><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>用于连接多个条件（多个关系表达式），最终的结果也是一个 boolean 值<br><img src="/2022/09/15/%E8%BF%90%E7%AE%97%E7%AC%A6/1_3.png"></p><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><ol><li>a&amp;b: &amp;叫逻辑与,规则:当 a 和 b 同时为 true,则结果为 true,否则为 false</li><li>a&amp;&amp;b: &amp;&amp;叫短路与,规则:当 a 和 b 同时为 true,则结果为 true,否则为 false</li><li>a|b: |叫逻辑或,规则:当 a 和 b 有一个为 true,则结果为 true,否则为 false</li><li>a||b: ||叫短路或,规则:当 a 和 b 有一个为 true,则结果为 true,否则为false</li><li>!a: !叫取反&#x2F;非运算,当 a 为 true,结果为 false,当 a 为false结果为true</li><li>a^b: ^叫逻辑异或,规则:当 a 和 b 不同时，结果为 true,否则为 false</li></ol><h3 id="逻辑与-amp-与短路与-amp-amp"><a href="#逻辑与-amp-与短路与-amp-amp" class="headerlink" title="逻辑与&amp;与短路与&amp;&amp;"></a>逻辑与&amp;与短路与&amp;&amp;</h3><p>基本规则:<br>名称            语法            特点<br>短路与&amp;&amp;    条件1 &amp;&amp; 条件2      两个条件都为 true，结果为 true,否则 false<br>逻辑与&amp;     条件1 &amp; 条件2       两个条件都为 true，结果为 true,否则 false<br>使用区别:</p><ol><li>&amp;&amp;短路与：如果第一个条件为 false，则第二个条件不会判断，最终结果为 false，效率高</li><li>&amp; 逻辑与：不管第一个条件是否为 false，第二个条件都要判断，效率低</li><li>开发中， 我们使用的基本是使用短路与&amp;&amp;</li></ol><h3 id="逻辑或-与短路或"><a href="#逻辑或-与短路或" class="headerlink" title="逻辑或|与短路或||"></a>逻辑或|与短路或||</h3><p>基本规则:<br>名称            语法            特点<br>短路或||    条件1||条件2        两个条件中只要有一个条件为true则结果为 true,否则为false<br>|逻辑或     条件1|条件2         两个条件中只要有一个条件true则结果为true,否则为 false<br>使用区别:</p><ol><li>||短路或：如果第一个条件为 true，则第二个条件不会判断，最终结果为true</li><li>| 逻辑或：不管第一个条件是否为 true，第二个条件都要判断</li><li>开发中，我们基本使用短路或||</li></ol><h3 id="取反"><a href="#取反" class="headerlink" title="取反!"></a>取反!</h3><p>基本规则:<br>名称            语法            特点<br>!非(取反)       !条件           如果条件本身成立,结果为 false,否则为true</p><h3 id="逻辑异或"><a href="#逻辑异或" class="headerlink" title="逻辑异或^"></a>逻辑异或^</h3><p>基本规则:<br>名称            语法            特点<br>^逻辑异或   条件1^条件2         当条件1和条件2不同时,则结果为 true, 否则为 false<br>举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">boolean a = (10&lt;1)^(3&lt;5)    //结果是true</span><br><span class="line">boolean b = (10&gt;1)^(3&lt;5)    //结果是false</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>基本赋值运算符: &#x3D;<br>符合赋值运算符: +&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;</p><p>案例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int i = 1;  //将1赋值给i</span><br><span class="line">a+=b    //等价于 a=a+b</span><br><span class="line">a-=b    //等价于 a=a-b</span><br></pre></td></tr></table></figure><h3 id="赋值运算符细节"><a href="#赋值运算符细节" class="headerlink" title="赋值运算符细节"></a>赋值运算符细节</h3><ol><li>运算顺序从右往左 int num &#x3D; a+b+c;</li><li>赋值运算符的左边 只能是变量,右边 可以是变量、表达式、常量值</li><li>复合赋值运算符等价于下面的效果<br><code>a+=b    //等价于 a=a+b</code></li><li>复合赋值运算符会进行类型转换</li></ol><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>基本语法:条件表达式 ? 表达式 1: 表达式 2;<br>运算规则:</p><ol><li>如果条件表达式为 true,运算后的结果是表达式 1</li><li>如果条件表达式为 false,运算后的结果是表达式 2<br>举例:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a = 5;</span><br><span class="line">int b = 3;</span><br><span class="line">int result = a&gt;b?a++:b++;</span><br><span class="line">// 结果result = 6</span><br></pre></td></tr></table></figure></li></ol><h3 id="三元运算符细节"><a href="#三元运算符细节" class="headerlink" title="三元运算符细节"></a>三元运算符细节</h3><ol><li>表达式 1 和表达式 2 要为可以赋给接收变量的类型(或可以自动转换)</li><li>三元运算符可以转成 if–else</li></ol><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><ol><li>运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序。</li><li>只有单目运算符、赋值运算符是从右向左运算的<br><img src="/2022/09/15/%E8%BF%90%E7%AE%97%E7%AC%A6/%E4%BC%98%E5%85%88%E7%BA%A7.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 运算符 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本数据类型转换</title>
      <link href="/2022/09/14/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2022/09/14/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a><center>基本数据类型转换</h1><h2 id="基本数据类型转换-1"><a href="#基本数据类型转换-1" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h2><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p>介绍:<br>当java程序在进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型,这个就是自动类型转换。<br>数据类型按精度大小排序:<br>char–&gt;int–&gt;long–&gt;float–&gt;double<br>byte–&gt;short–&gt;int–&gt;long–&gt;float–&gt;double</p><h4 id="自动类型转换细节"><a href="#自动类型转换细节" class="headerlink" title="自动类型转换细节"></a>自动类型转换细节</h4><ol><li>有多种类型的数据混合运算时,系统会先将所有的数据数据类型转换成最大的数据类型,然后再进行运算</li><li>当我们把精度大的数据类型赋值给精度小的数据类型时,就会报错</li><li>(byte,short)和char之间不会相互自动转换</li><li>(byte,short)和char三者可以计算,在计算时首先转换为int类型</li><li>boolean不参与转换</li></ol><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>介绍:<br>自动类型转换的逆过程，将精度大的数据类型转换为精度小的数据类型时要加上强制转换符()，但可能造成精度降低或溢出,要格外注意。</p><h4 id="强制类型转换细节"><a href="#强制类型转换细节" class="headerlink" title="强制类型转换细节"></a>强制类型转换细节</h4><ol><li>将精度大的数据类型转为精度小的数据类型时,就需要用到强制转换</li><li>强转符号只针对于最近的操作数有效,往往会使用小括号提升优先级<br> 2.1. 举例: <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a = (int)10*3.5+6*1.5   //这句话会报错</span><br><span class="line">//修改为</span><br><span class="line">int b = (int)(10*3.5+6*1.5)</span><br></pre></td></tr></table></figure></li><li>char类型可以保存int的常量值,但不能保存int的变量值,需要强转<br> 3.1. 举例: <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">char a = 100;</span><br><span class="line">int b = 100;</span><br><span class="line">char a1 = b;    //报错</span><br><span class="line">char a2 = (char)b;</span><br></pre></td></tr></table></figure></li><li>byte和short, char类型在进行运算时，当做int类型处理。</li></ol><h2 id="基本数据类型转换和String类型转换"><a href="#基本数据类型转换和String类型转换" class="headerlink" title="基本数据类型转换和String类型转换"></a>基本数据类型转换和String类型转换</h2><p>在程序开发中，我们经常需要将基本数据类型转成String类型。或者将String类型转成基本数据类型。<br>语法:<br>基本类型转String:<br>    基本类型的值+””<br>String类型转基本类型:<br>    通过基本类型包装类调用parseXX方法,举例:<br>    <code>Integer.parseInteger(&quot;123&quot;);</code><br>*需要注意的是在将String类型转成基本数据类型时，要确保String类型能够转成有效的数据，比如我们可以把”123”，转成一个整数，但是不能把”hello”转成一个整数</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 变量 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量</title>
      <link href="/2022/09/14/%E5%8F%98%E9%87%8F/"/>
      <url>/2022/09/14/%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a><center>变量</h1><blockquote><p>“变量是用来存储数据的特殊实体。任何数据。在 Java 语言中，所有数据都存储在变量中。最接近的比喻就好比是一个盒子。”<br>“一个盒子？什么样的盒子？”<br>“任何一个旧盒子。假设你在一张纸上写下数字 13，并把它放进一个盒子里。现在我们可以说，这个盒子里面存的是数值 13。”</p></blockquote><h2 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h2><p>变量相当于内存中一个数据存储空间的表示，你可以把变量看做是一个房间的门牌号，通过门牌号我们可以找到房间，而通过变量名可以访问到变量(值)</p><h2 id="变量快速入门"><a href="#变量快速入门" class="headerlink" title="变量快速入门"></a>变量快速入门</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a = 1;</span><br></pre></td></tr></table></figure><p>解释:<br>int 是数据类型<br>a是变量名<br>1是值</p><h2 id="变量注意事项"><a href="#变量注意事项" class="headerlink" title="变量注意事项"></a>变量注意事项</h2><ol><li>变量表示内存中一个存储区域,其中不同的变量,类型不同,占用的空间大小不同,例如:int占用4个字节,double占用8个字节</li><li>变量必须先声明后使用在Java 语言中，每个变量都有三个重要的属性：类型、名称和值。</li><li>变量在同一个作用域内不能重名</li><li>该区域的值可以在同一类型范围内不断变化</li><li>只能给一个变量赋一个值</li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote><p>每一种数据都定义了明确的数据类型,在内存中分配了不同大小的内存空间</p></blockquote><p>*内存空间使用字节来衡量<br>java中数据类型分为基本数据类型和引用数据类型:</p><h3 id="基本数据类型有8种"><a href="#基本数据类型有8种" class="headerlink" title="基本数据类型有8种:"></a>基本数据类型有8种:</h3><ol><li>数值型<br>1.1 整型    byte[1], short[2], int[4], long[8]<br>2.2 浮点型(小数)    double[8], float[4]</li><li>字符型   char[2]</li><li>布尔型   boolean[1] –只有true和false,适用于逻辑运算</li></ol><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型:"></a>引用数据类型:</h3><ol><li>类(class)</li><li>接口(interface)</li><li>数组([])</li></ol><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h4><h5 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h5><p>整型的类型:<br>Java的整型类型就是用于存放整数数值的,比如1,125,600等等</p><ol><li>byte[字节]</li><li>short[短整型]</li><li>int[整型]</li><li>long[长整型]<br><img src="/2022/09/14/%E5%8F%98%E9%87%8F/%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B.png"></li></ol><h5 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h5><p>浮点类型:<br>Java的浮点类型可以用来表示一个小数,比如1.5,125.067,0.3等等</p><ol><li>florat[单精度]</li><li>double[双精度]<br><img src="/2022/09/14/%E5%8F%98%E9%87%8F/%E6%B5%AE%E7%82%B9%E7%B1%BB%E5%9E%8B.png"></li></ol><ul><li></li></ul><ol><li>关于浮点数在机器中存放形式的简单说明:浮点数&#x3D;符号位+指数位+尾数位</li><li>尾数部分可能丢失,造成精度损失(小数都是近似值)</li><li>浮点型有两种表示形式:<br> 3.1 十进制数形式:<br> 如:.123(0.123),5.12,5.12f<br> 3.2 科学计数法形式:<br> 如:5.12e2[5.12*10的2次方],5.12E-2[5.12&#x2F;10的二次方]</li><li>通常情况下因该使用double型,因为他比float更精确,float会舍去尾数部分,取近似值</li><li>浮点型陷阱:2.7和8.1&#x2F;3作比较<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">    double a = 2.7;</span><br><span class="line">    double b = 8.1/3;</span><br><span class="line"></span><br><span class="line">    System.out.println(a+&quot;\n&quot;+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/09/14/%E5%8F%98%E9%87%8F/%E6%B5%AE%E7%82%B9%E9%99%B7%E9%98%B1.png"><br>由上可知:当我们对运算结果是小数的进行判断时,要小心不要掉落陷阱,计算机做计算的时候是以精度来计算的,我们应该以两个数的差值的绝对值在某个精度范围内进行判断<br>例如:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">    double a = 2.7;</span><br><span class="line">    double b = 8.1/3;</span><br><span class="line"></span><br><span class="line">    //错误的写法不会判断为相等</span><br><span class="line">    if(a == b)&#123;</span><br><span class="line">         System.out.println(&quot;相等&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //正确的写法</span><br><span class="line">    if(Math.abs(a-b)&lt;0.000001&gt;)&#123;</span><br><span class="line">         System.out.println(&quot;差值非常小,到了规定的精度,判断相等&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><h5 id="字符型-char"><a href="#字符型-char" class="headerlink" title="字符型(char)"></a>字符型(char)</h5><blockquote><p>字符类型表示单个字符,字符类型是char,char是两个字节(可以存放汉字)</p></blockquote><p>案例演示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char a = &#x27;a&#x27;;</span><br><span class="line">char b = &#x27;你&#x27;;</span><br><span class="line">char c = 97;   //当输出c的时候输出97表示的字符</span><br></pre></td></tr></table></figure><p><img src="/2022/09/14/%E5%8F%98%E9%87%8F/char_1.png"><br>字符细节:</p><ol><li>字符常量是用单引号(‘’)括起来的单个字符。</li><li>java中还允许使用转义字符’&#39;来将其之后的字符转变为特殊字符型常量。例如:char a &#x3D; ‘\n’;’\n’表示换行符。</li><li>在java中char的本质是一个整数,在输出时,是Unicode码对应的字符</li><li>可以直接给char赋一个整数,在输出时会按照对应的Unicode字符输出</li><li>char类型是可以进行运算的,相当于一个整数,因为都有对应的Unicode码。</li></ol><h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><h5 id="布尔型-boolean"><a href="#布尔型-boolean" class="headerlink" title="布尔型(boolean)"></a>布尔型(boolean)</h5><p>基本介绍:</p><ol><li>布尔类型也叫boolean类型,boolean类型数据只允许取值true和false</li><li>boolean类型占1个字节</li><li>boolean类型适用于逻辑运算,一般用于程序流程控制,例如:<br> if条件控制语句<br> while循环控制语句<br> do-while循环控制语句<br> for循环控制语句<br>案例演示:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">    boolean test = true;</span><br><span class="line">    if(test)&#123;</span><br><span class="line">        System.out.println(&quot;通过测试!&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        System.out.println(&quot;没有通过测试!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>注意:不可以用0或非0的整数代替false和true,这点和c语言不同</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 变量 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java快速入门</title>
      <link href="/2022/09/14/Java%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2022/09/14/Java%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Java快速入门"><a href="#Java快速入门" class="headerlink" title="Java快速入门"></a><center>Java快速入门</h1><h2 id="HelloWorld我的第一个程序"><a href="#HelloWorld我的第一个程序" class="headerlink" title="HelloWorld我的第一个程序"></a>HelloWorld我的第一个程序</h2><ol><li><p>新建一个HelloWorld.java文件 输入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class HelloWorld &#123;   //表示一个类的开始</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;//表示一个类的结束</span><br></pre></td></tr></table></figure></li><li><p>public class HelloWorld 表示 HelloWorld 是一个类,是一个 public 公有的类</p></li><li><p>HelloWorld{ } 表示一个类的开始和结束</p></li><li><p>public static void main(String[] args) 表示一个主方法,即我们程序的入口</p></li><li><p>通过javac命令编译HelloWorld.java文件,生成一个.class文件</p></li><li><p>通过java运行刚刚编译好的.class文件</p></li></ol><h2 id="开发注意事项和细节"><a href="#开发注意事项和细节" class="headerlink" title="开发注意事项和细节"></a>开发注意事项和细节</h2><ol><li>在 Java 编程语言中，每个命令都单独占用一行。</li><li>一个程序不能只包含命令。<br>在java语言中命令不能单独存在,它是方法的一部分,而方法是类的一部分<br>Java程序由类组成。即使是最小程序也含有一个类,该类必须包含至少一个方法&#x2F;函数才能使程序运行。对于每个类,都创建一个单独的文件。文件的名称与类的名称相匹配<br>最小程序举例:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Home&#123;</span><br><span class="line">    public static void main (String[] args)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Java程序的执行入口是main()方法。它有固定的书写格式:public static void main(String[] args){}</li><li>Java语言严格区分大小写。</li><li>Java方法由一条条语句构成，每个语句以”;”结尾。</li><li>大括号都是成对出现的，缺一不可。</li><li>一个源文件中最多只能有一个public类。其它类的个数不限。</li><li>如果源文件包含一个public类，则文件名必须按该类名命名。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java概述 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java概述</title>
      <link href="/2022/09/14/Java%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/09/14/Java%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java概述"><a href="#Java概述" class="headerlink" title="Java概述"></a><center>Java概述</h1><h2 id="什么是java"><a href="#什么是java" class="headerlink" title="什么是java"></a>什么是java</h2><blockquote><p>Java是由Sun微系统公司所发展出来的程序语言，它本身是一种对象导向(Object-Oriented)的程序语言</p></blockquote><h3 id="java的诞生"><a href="#java的诞生" class="headerlink" title="java的诞生"></a>java的诞生</h3><ul><li>1990 sun公司启动绿色计划</li><li>1992 创建 java语言</li><li>1994 gosling参加硅谷大会演示java功能,震惊世界</li><li>1995 sun正式发布java的第一个版本</li><li>2009 甲骨文公司宣布收购sun公司</li><li>2011 发布java7</li><li>2014 发布java8</li></ul><h3 id="java技术体系平台"><a href="#java技术体系平台" class="headerlink" title="java技术体系平台"></a>java技术体系平台</h3><ol><li>JavaSE(标准版):<br> 支持面向桌面级应用的Java平台,提供了完整对的Java核心API</li><li>JavaEE(企业版):<br> 是为开发企业环境下的应用程序提供的一套解决方案,主要针对web开发</li><li>JavaME(小型版):<br> 支持java在移动端运行,最Java API有所精简,并加入了对移动端的支持</li></ol><h3 id="java的重要特点"><a href="#java的重要特点" class="headerlink" title="java的重要特点"></a>java的重要特点</h3><ol><li>java语言是面向对象(OOP)的</li><li>java语言是健壮的,java的强类型机制、异常处理、垃圾的自动手记等是java程序健壮性的重要保证</li><li>java语言是跨平台的</li><li>java语言是解释型语言<br>*解释型语言:编译后的代码不能直接被机器执行,需要解释器来执行<br>*编译型语言:编译后的代码可以直接被机器执行例如:c,c++</li></ol><h3 id="java的运行机制及过程"><a href="#java的运行机制及过程" class="headerlink" title="java的运行机制及过程"></a>java的运行机制及过程</h3><blockquote><p>java语言是跨平台性的 而正是有了jvm,同一个Java程序可以在不同的操作系统中运行<br><img src="/2022/09/14/Java%E6%A6%82%E8%BF%B0/jvm_1.png"></p></blockquote><h4 id="java核心机制-java虚拟机-JVM-java-virtual-machine"><a href="#java核心机制-java虚拟机-JVM-java-virtual-machine" class="headerlink" title="java核心机制-java虚拟机[JVM java virtual machine]"></a>java核心机制-java虚拟机[JVM java virtual machine]</h4><p>基本介绍:</p><ol><li>jvm 是一个虚拟的计算机,具有指令集并使用不同的储存区域,负责执行命令、管理数据、内存、寄存器包含在JDK中<br><img src="/2022/09/14/Java%E6%A6%82%E8%BF%B0/jvm_2.png"></li><li>对于不同的平台有不同的虚拟机</li><li>正是因为有了jvm,同一个Java程序才可以在不同的操作系统中运行,实现’一次编译,处处运行’</li></ol><h2 id="什么是JDK-JRE"><a href="#什么是JDK-JRE" class="headerlink" title="什么是JDK,JRE"></a>什么是JDK,JRE</h2><h3 id="JDK的基本介绍"><a href="#JDK的基本介绍" class="headerlink" title="JDK的基本介绍"></a>JDK的基本介绍</h3><p>JDK (java development kit   java开发工具包)<br>JDK &#x3D; JRE+java开发工具(java,javac,javadoc,javaap等)<br>JDK是提供给Java开发人员使用的,其中包含了java 的开发工具这里面也包括了JRE。所以安装了JDK,就不用在单独安装 JRE了</p><h3 id="JRE的基本介绍"><a href="#JRE的基本介绍" class="headerlink" title="JRE的基本介绍"></a>JRE的基本介绍</h3><p>JRE (java runtime environment   java运行环境)<br>JRE &#x3D; JVM+java核心类库<br>包括了java虚拟机(JVM)和java程序所需要的核心类库,如果想要运行一个已经开发好了的Java程序计算机中只需要安装JRE即可</p><h3 id="JDK、JRE和JVM的包含关系"><a href="#JDK、JRE和JVM的包含关系" class="headerlink" title="JDK、JRE和JVM的包含关系"></a>JDK、JRE和JVM的包含关系</h3><ol><li>JDK &#x3D; JRE + 开发工具集(例如:Javac,java编译工具等)</li><li>JRE &#x3D; JVM + Java SE标准类库</li><li>如果只想运行.class文件 只需要JRE<br><img src="/2022/09/14/Java%E6%A6%82%E8%BF%B0/jvm_3.png"></li></ol><h2 id="下载安装JDK"><a href="#下载安装JDK" class="headerlink" title="下载安装JDK"></a>下载安装JDK</h2><h3 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h3><p>前往官方网址下载JDK:<a href="https://www.oracle.com/java/technologies/downloads/">https://www.oracle.com/java/technologies/downloads/</a><br>选择你要下载的版本进行安装:</p><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><ol><li>双击下载好的程序,点击下一步</li><li>修改默认目录，点击下一步。<br>细节说明:安装路径注意不要有中文或者特殊符号如空格等。</li><li>会提示安装jre，同样修改默认目录，新建目录名如图：</li><li>继续点击下一步，点击关闭，完成安装。<br><img src="/1.png"></li></ol><h2 id="Java配置环境变量"><a href="#Java配置环境变量" class="headerlink" title="Java配置环境变量"></a>Java配置环境变量</h2><p>当你安装好JDK之后，在JDK安装路径之外的地方使用java命令时会报错，这是因为当前执行的程序在当前目录下如果不存在，windows系统会在系统中已有的一个名为path的环境变量指定的目录中查找。如果仍未找到则会出现找不到路径的错误提示。这个时候我们就需要进行环境配置</p><ol><li>右键点击“此电脑”，选择属性，选择高级系统设置。<br>点击环境变量:<br><img src="/2022/09/14/Java%E6%A6%82%E8%BF%B0/path_1.png"></li><li>选择系统变量，点击新建，输入变量名JAVA_HOME，变量值为JDK的bin目录所在路径。如:D:\Java\JDK<br><img src="/2022/09/14/Java%E6%A6%82%E8%BF%B0/path_2.png"></li><li>选择系统变量，找到Path变量，点击编辑。<br><img src="/2022/09/14/Java%E6%A6%82%E8%BF%B0/path_3.png"></li><li>点击新建，输入%JAVA_HOME%\bin，点击确定。<br><img src="/2022/09/14/Java%E6%A6%82%E8%BF%B0/path_4.png"></li><li>使用Windows+R键输入cmd点击确定打开命令窗口<br><img src="/2022/09/14/Java%E6%A6%82%E8%BF%B0/path_5.png"></li><li>在命令窗口输入javac –version,出现版本号表示环境变量配置成功</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java概述 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js安装教程</title>
      <link href="/2022/09/13/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2022/09/13/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js安装教程"><a href="#Node-js安装教程" class="headerlink" title="Node.js安装教程"></a><center>Node.js安装教程</h1><h2 id="下载安装Nodejs"><a href="#下载安装Nodejs" class="headerlink" title="下载安装Nodejs"></a>下载安装Nodejs</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装:"></a>下载安装:</h3><ol><li>首先去<a href="https://nodejs.org/en/">官网</a>进行下载,官网下载地址:<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li><li>下载安装node-v16.17.0-x64.msi<br><img src="/2022/09/13/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/NodejsDownload.png"></li><li>打开下载好的安装程序,点击下一步<br><img src="/2022/09/13/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/next.png"></li><li>选择接受许可协议<br><img src="/2022/09/13/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/accept_next.png"></li><li>Node.js的默认安装路径为”C:\Program Files\nodejs&quot;你可以点击Change修改安装路径,修改好路径后,点击next<br><img src="/2022/09/13/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/update_i_path.png"></li><li>直接点击Next<br><img src="/2022/09/13/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/next_2.png"></li><li>不用勾选直接Next<br><img src="/2022/09/13/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/next_3.png"></li><li>点击Install安装<br><img src="/2022/09/13/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Install.png"></li><li>最后点击Finish完成安装</li></ol><h3 id="检验"><a href="#检验" class="headerlink" title="检验:"></a>检验:</h3><ol><li><p>win+R 打开运行窗口,输入cmd命令<br><img src="/2022/09/13/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/cmd.png"></p></li><li><p>进入命令提示符窗口</p><ul><li>node -v：显示安装的nodejs版本</li><li>npm -v：显示安装的npm版本<br><img src="/2022/09/13/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/check_version.png"></li></ul></li></ol><h2 id="修改全局依赖包下载路径"><a href="#修改全局依赖包下载路径" class="headerlink" title="修改全局依赖包下载路径"></a>修改全局依赖包下载路径</h2><ul><li>我们在执行 npm install -g XXXX 下载全局包时,这个包的默认存放在C:\Users\用户名\AppData\Roaming\npm\node_modules下</li><li>但是有一些小伙伴想要减少c盘空间的占用,这个时候我们可以将全局模块和缓存放在你想放在的目录下:<ol><li><p>在你的nodejs安装目录下创建两个文件夹node_global和node_cache<br>  <img src="/2022/09/13/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/create.png"></p></li><li><p>在node_global文件夹里再建一个node_modules文件夹，用于配置环境变量<br>  <img src="/2022/09/13/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/create_2.png"></p></li></ol></li><li>之后使用win+R打开运行窗口，输入cmd，再输入以下两条指令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;创建的node_global文件夹所在路径&quot;</span><br><span class="line">npm config set cache &quot;创建的node_cache文件夹所在路径&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>例如:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\nodejs\node_global&quot;</span><br><span class="line">npm config set cache &quot;D:\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure>或者打开nodejs的安装目录下的node_modules——&gt;npm——&gt;npmrc文件修改如下:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prefix =创建的node_global文件夹所在路径</span><br><span class="line">cache =创建的node_cache文件夹所在路径</span><br></pre></td></tr></table></figure></li><li>修改完毕后,配置环境变量<ol><li><p>右键此电脑——&gt;高级系统设置——&gt;环境变量</p></li><li><p>在系统变量中新建系统变量,变量名:NODE_PATH;变量值你的node_global文件夹下的node_modules文件夹。如:”D:\nodejs\node_global\node_modules”<br>  <img src="/new_environment_variable.png"></p></li><li><p>修改用户变量中的Path,将默认的npm路径改为你新建的node_global路径</p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客</title>
      <link href="/2022/09/07/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/09/07/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo搭建个人博客"><a href="#Hexo搭建个人博客" class="headerlink" title="Hexo搭建个人博客"></a><center>Hexo搭建个人博客</h1><h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><p>首先需要前往node.js<a href="https://nodejs.org/en/download/">官网</a>进行下载安装。安装教程可以看我的这一篇文章<a href="https://tomatoooooooo.gitee.io/2022/09/13/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/">Node.js安装教程</a></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1.安装Hexo"></a>1.安装Hexo</h3><ol><li>在你的电脑上找一个合适的地方例如:”D:\developer”,新建一个文件夹hexo(取名随意)</li><li>使用win+R 打开运行窗口,输入cmd命令进入命令提示符窗口</li><li>使用cd命令切换到你刚刚新建的目录下<br><img src="/2022/09/07/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/cd_d.png"></li><li>使用命令,安装hexo<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li>安装完之后使用命令,检查一下版本,显示版本号就是安装成功了<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><img src="/2022/09/07/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo_version.png"><br>命令提示符窗口先不用关,等下需要初始化hexo</li></ol><h3 id="2-初始化hexo-启动服务站点"><a href="#2-初始化hexo-启动服务站点" class="headerlink" title="2.初始化hexo 启动服务站点"></a>2.初始化hexo 启动服务站点</h3><ol><li>在刚刚打开的命令提示符窗口里输入命令进行初始化<br><code>hexo init</code></li><li>初始化完成之后在命令提示符窗口里输入以下命令启动服务站点<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g  //生成静态文件</span><br><span class="line">hexo s  //启动服务器</span><br></pre></td></tr></table></figure></li><li>访问链接”<a href="http://localhost:4000&quot;">http://localhost:4000&quot;</a> 你可以就在本地看到自己的博客了。</li><li>按Crtl+C关闭服务</li></ol><h2 id="GitHub建站访问"><a href="#GitHub建站访问" class="headerlink" title="GitHub建站访问"></a>GitHub建站访问</h2><h3 id="创建github个人仓库"><a href="#创建github个人仓库" class="headerlink" title="创建github个人仓库"></a>创建github个人仓库</h3><ol><li>进入<a href="https://github.com/">官网</a>注册一个GitHub账号</li><li>进入个人主页new一个仓库<br><img src="/2022/09/07/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/newGitHubWarehouse.png"><br>* 仓库名格式应该为：用户名.github.io</li></ol><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>你写的的hexo博客文章，需要通过git上传到GitHub的仓库，然后才能显示在你的博客网站上</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><ol><li>Git官网下载:<br> 1.1. <a href="https://git-scm.com/downloads">点击链接</a>,跳转到官网下载<br> * 点击windows,跳转到下载页面<br> <img src="/2022/09/07/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/git_download.png"><br> * 根据你的需求进行下载<br> <img src="/2022/09/07/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/download_for_windows.png"><br> * 1</li><li>国内镜像下载:<br>如果使用git官网无法下载可以使用国内镜像进行下载<br> 2.2 点击<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">window国内镜像下载</a>,跳转到下载页面<br> * 在该页面选择你要下载的版本进行下载<br> <img src="/2022/09/07/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/c_win_download.png"></li></ol><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>双击下载好的安装包:<br>一直点击next,直到出现install,点击install,然后点击finish，安装完成。<br>安装完成后,右键桌面出现Git GUI、Git bash选项,说明已安装完成</p><h3 id="安装hexo上传插件"><a href="#安装hexo上传插件" class="headerlink" title="安装hexo上传插件"></a>安装hexo上传插件</h3><p><code>npm install hexo-deployer-git --save</code></p><h3 id="修改hexo配置文件"><a href="#修改hexo配置文件" class="headerlink" title="修改hexo配置文件"></a>修改hexo配置文件</h3><p>打开你的hexo文件夹,找到_config.yml文件翻到最后找到deploy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type: git</span><br><span class="line">repo: 你的github仓库路径</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p><img src="/2022/09/07/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/deploy.png"></p><h3 id="推送站点到github"><a href="#推送站点到github" class="headerlink" title="推送站点到github"></a>推送站点到github</h3><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这三行分别是用来:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  //清楚缓存</span><br><span class="line">hexo generate   //更新文件   </span><br><span class="line">hexo deploy //部署</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>第一次上传你的博客时deploy可能要你输入github的用户名和密码,这个时候照做就行,需要注意的是github更改了认证策略后续认证的方式改为了token的形式,访问<a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">官方网站</a>,提供的教程创建token,登录时在密码输入时输入token值</p><p>查看你的博客:https:&#x2F;&#x2F;你的github用户名.github.io&#x2F;</p><h2 id="修改Hexo主题"><a href="#修改Hexo主题" class="headerlink" title="修改Hexo主题"></a>修改Hexo主题</h2><p>你可能不喜欢hexo的默认主题,如果想要更换主题的话可以访问:<a href="https://hexo.io/themes/">https://hexo.io/themes/</a> 来寻找你喜欢的主题</p><ol><li>使用git将你喜欢的主题clone在hexo的themes文件夹下,例如:<br><code>git clone https://github.com/blinkfox/hexo-theme-matery.git</code><br><img src="/2022/09/07/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/themes.png"></li><li>下载完成之后,修改Hexo根目录下的_config.yml 文件的theme的值：theme: hexo-theme-matery,然后保存文件<br><img src="/2022/09/07/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/themes_2.png"></li><li>在npm命令行中使用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>在本地预览修改主题后的博客</li></ol><h2 id="创建你的第一篇文章"><a href="#创建你的第一篇文章" class="headerlink" title="创建你的第一篇文章"></a>创建你的第一篇文章</h2><p>在站点文件夹中打开git,输入如下命令创建文章,其中’myblog’是文章的标题。hexo会在source文件夹下创建一个markdowm的文件。这就是你要编写的文章。</p><blockquote><p>Markdown 是一种轻量级标记语言。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。由于 Markdown 的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。 如 GitHub、Reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge、简书等，甚至还能被使用来撰写电子书。</p></blockquote><p><code>hexo new &quot;myblog&quot;</code><br>使用VScode打开你的myblog.md文件就可以使用markdown语言编写你的第一篇文章了!</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Bolg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/20/hello-world/"/>
      <url>/2022/07/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
